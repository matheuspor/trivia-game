{"version":3,"sources":["pages/Feedback/index.js","pages/Game/TimeCounter/index.js","services/helperServices.js","pages/Game/styles.js","pages/Game/QuestionBody/index.js","pages/Game/index.js","store/actions/index.js","services/apiHelper.js","pages/Login/Footer/Footer.js","components/Backdrop.jsx","assets/trivia.png","pages/Login/styles.js","theme.js","pages/Settings/SettingsSelect/index.js","pages/Settings/ErrorDialog/index.js","pages/Settings/index.js","pages/Login/index.js","pages/Ranking/index.js","App.js","store/reducers/user.js","store/reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Feedback","SMALL_SCREEN_FONT_SIZE","JSON","parse","localStorage","getItem","player","picture","name","score","assertions","history","this","props","Container","component","maxWidth","sx","pb","Stack","my","alignItems","Paper","mx","p","Grid","container","spacing","item","Avatar","src","alt","Typography","fontWeight","fontSize","xs","sm","variant","color","display","flexDirection","elevation","textAlign","px","pt","mb","fontStyle","textDecoration","Button","onClick","push","Component","TimeCounter","timer","Box","position","top","left","bottom","right","justifyContent","TimerTwoTone","CircularProgress","value","size","thickness","React","updateLocalStorage","PlayerAssertions","PlayerScore","localStorageObj","gravatarEmail","email","avatar","setItem","stringify","styles","disabledGreen","borderColor","border","background","disabledRed","QuestionBody","questions","handler","classes","state","questionNumber","clicked","allQuestions","correct_answer","incorrect_answers","sort","map","question","index","disabled","id","className","decodeURIComponent","type","nextButton","md","category","py","gutterBottom","randomAnswers","mt","Game","playerScore","playerAssertions","handleClick","bind","setTimer","playerInfo","getRanking","updateRanking","target","difficulty","obj","easy","medium","hard","setState","prevstate","countdown","setInterval","prevState","clearInterval","length","height","width","style","backgroundColor","connect","user","withStyles","SET_PLAYER_INFO","SET_QUESTIONS","SET_SETTINGS","fetchPlayerToken","a","fetch","then","response","json","token","request","fetchSetPlayerImg","hash","md5","toString","url","newUser","fetchQuestions","settings","settingsKeys","Object","keys","apiCall","forEach","setting","results","Footer","align","Link","href","BackdropComp","open","Backdrop","logo","animation","theme","createTheme","palette","default","primary","main","secondary","SettingsSelect","values","TextField","onChange","select","label","toUpperCase","substr","MenuItem","toLowerCase","ErrorDialog","openError","setOpenError","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autofocus","dispatch","sendSettings","payload","setPlayerSettings","setOpenSettings","openSettings","useState","openBackdrop","setOpenBackdrop","setSettings","categories","handleChange","cat","find","dividers","direction","SettingsOutlined","LoginPage","handleSubmit","trivia_categories","prevValue","event","sendQuestions","sendPlayer","preventDefault","onSubmit","autoComplete","required","helperText","underline","fullWidth","setPlayerQuestions","setPlayerInfo","Ranking","EmojiEventsTwoTone","List","lower","greater","ListItem","divider","ListItemAvatar","ml","ListItemText","App","exact","path","Login","game","INITIAL_STATE","userReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Boolean","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qXAMqBA,E,4JACnB,WACE,IAAMC,EAAyB,cAG/B,EAFiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAEzCC,OAAUC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,KAAMC,EAAjC,EAAiCA,MAAOC,EAAxC,EAAwCA,WAChCC,EAAYC,KAAKC,MAAjBF,QACR,OACE,cAACG,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKC,GAAK,CAAEC,GAAI,GAArD,SACE,eAACC,EAAA,EAAD,CACEF,GAAK,CACHG,GAAI,EACJC,WAAY,UAHhB,UAME,cAACC,EAAA,EAAD,CAAOL,GAAK,CAAEG,GAAI,EAAGG,GAAI,OAAQC,EAAG,GAApC,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAU,EAA1B,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CACE,cAAY,yBACZC,IAAMvB,EACNwB,IAAI,aAGR,cAACN,EAAA,EAAD,CAAMG,MAAI,EAAV,SACE,cAACI,EAAA,EAAD,CACEf,GAAK,CAAEgB,WAAY,OACjBC,SAAU,CACRC,GAAI,GACJC,GAAInC,IAERoC,QAAQ,KACRC,MAAM,iBAPR,SASG9B,WAKT,eAACc,EAAA,EAAD,CACEe,QAAQ,WACRpB,GAAK,CACHO,EAAG,EACHe,QAAS,OACTC,cAAe,SACfnB,WAAY,UANhB,UAQE,cAACC,EAAA,EAAD,CAAOmB,UAAU,IAAIxB,GAAK,CAAEyB,UAAW,SAAUlB,EAAG,EAAGmB,GAAI,GAA3D,SACE,cAACX,EAAA,EAAD,CACEK,QAAQ,KACRC,MAAM,eAFR,0BAIa7B,EAJb,eAOF,cAACuB,EAAA,EAAD,CACEf,GAAK,CAAE2B,GAAI,EACT1B,GAAI,EACJgB,SAAU,CACRC,GAAI,GACJC,GAAInC,GAENgC,WAAY,WACdK,MAAM,eARR,8BAUiB5B,EAVjB,yBAYCA,GA/De,GAiEV,cAACsB,EAAA,EAAD,CACEf,GAAK,CAAE4B,GAAI,EACTC,UAAW,UACXb,WAAY,UACZc,eAAgB,YAChBb,SAAU,CACRC,GAAI,GACJC,GAAInC,IAPV,uBAaN,cAAC+C,EAAA,EAAD,CACEX,QAAQ,WACR,cAAY,iBACZC,MAAM,UACNW,QAAU,kBAAMtC,EAAQuC,KAAK,iBAC7BjC,GAAK,CAAE4B,GAAI,GALb,wBASA,cAACG,EAAA,EAAD,CACEX,QAAQ,YACR,cAAY,cACZC,MAAM,UACNW,QAAU,kBAAMtC,EAAQuC,KAAK,yBAJ/B,iC,GA3F0BC,a,4CCAjBC,E,4JACnB,WACE,IAAQC,EAAUzC,KAAKC,MAAfwC,MAER,OACE,eAACC,EAAA,EAAD,CACErC,GAAK,CACHsC,SAAU,WAAYhB,QAAS,eAFnC,UAKE,cAACe,EAAA,EAAD,CACErC,GAAK,CACHuC,IAAK,EACLC,KAAM,EACNC,OAAQ,GACRC,MAAO,EACPJ,SAAU,WACVhB,QAAS,OACTlB,WAAY,SACZuC,eAAgB,UATpB,SAYE,cAACC,EAAA,EAAD,CAAc5C,GAAK,CAAEiB,SAAU,QAEjC,cAAC4B,EAAA,EAAD,CACEzB,QAAQ,cACR0B,MAvBc,KAuBNV,EACRpC,GAAK,CAAEqB,MAAO,WACd0B,KAAO,GACPC,UAAY,IAEd,cAACX,EAAA,EAAD,CACErC,GAAK,CACHuC,IAAK,GACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPJ,SAAU,WACVhB,QAAS,OACTlB,WAAY,SACZuC,eAAgB,UATpB,SAYE,cAAC5B,EAAA,EAAD,CACEf,GAAK,CAAEgB,WAAY,IAAKC,SAAU,IAClCG,QAAQ,KACRtB,UAAU,MACVuB,MAAM,iBAJR,SAMGe,a,GAjD4Ba,IAAMf,W,QCNlCgB,EAAqB,SAAC,EAAmC7D,GAAY,IAA7C8D,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,YAC/CC,EAAkB,CACtBhE,OAAQ,CACNE,KAAMF,EAAOE,KACbE,WAAY0D,EACZ3D,MAAO4D,EACPE,cAAejE,EAAOkE,MACtBjE,QAASD,EAAOmE,SAGpBrE,aAAasE,QAAQ,QAASxE,KAAKyE,UAAUL,KCMhCM,EAhBA,iBAAO,CACpBC,cAAe,CACb,aAAc,CACZC,YAAa,mBACbC,OAAQ,6BACRC,WAAY,mDACZ1C,MAAO,uBAGX2C,YAAa,CACX,aAAc,CACZD,WAAY,uDCPLE,EAAb,mKACE,SAAcC,GACZ,MAAiEvE,KAAKC,MAA9DuE,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAAjB,IAA0BC,MAASC,EAAnC,EAAmCA,eAAgBC,EAAnD,EAAmDA,QAC7CC,EAAe,CACnBN,EAAUI,GAAgBG,gBADP,mBAEhBP,EAAUI,GAAgBI,oBAC7BC,OACF,OACE,cAACzE,EAAA,EAAD,CAAOQ,QAAU,EAAjB,SACG8D,EAAaI,KAAI,SAACC,EAAUC,GAC3B,OAAID,IAAaX,EAAUI,GAAgBG,eAEvC,cAAC1C,EAAA,EAAD,CACExC,KAAK,iBACL6B,QAAQ,WACRY,QAAUmC,EACV,cAAY,iBACZY,SAAWR,EACXS,GAAG,UACHC,UAAYb,EAAQR,cAPtB,SAUGsB,mBAAmBL,IAFdC,GAOV,cAAC/C,EAAA,EAAD,CACEX,QAAQ,WACR+D,KAAK,SACLJ,SAAWR,EACXS,GAAKF,EACLG,UAAYb,EAAQJ,YAEpB,qCAA8Bc,GAC9B9C,QAAUmC,EARZ,SAUGe,mBAAmBL,IAJdC,UAjCpB,oBA6CE,WACE,MAAsEnF,KAAKC,MAAnEwF,EAAR,EAAQA,WAAYlB,EAApB,EAAoBA,UAApB,IAA+BG,MAASC,EAAxC,EAAwCA,eAAgBC,EAAxD,EAAwDA,QACxD,OACE,eAAClE,EAAA,EAAD,CACEe,QAAQ,WACRpB,GAAK,CACHD,SAAU,CAAEmB,GAAI,OAChBf,GAAI,CAAEe,GAAI,EAAGmE,GAAI,GACjB9E,EAAG,EACHN,GAAI,EACJqB,QAAS,OACTC,cAAe,SACfnB,WAAY,UAThB,UAWE,cAACC,EAAA,EAAD,CAAOmB,UAAU,IAAIxB,GAAK,CAAEyB,UAAW,SAAUlB,EAAG,GAApD,SACE,cAACQ,EAAA,EAAD,CAAYf,GAAK,CAAEiB,SAAU,CAAEC,GAAI,GAAImE,GAAI,IAAMrE,WAAY,QAA7D,SACGkE,mBAAmBhB,EAAUI,GAAgBgB,cAGlD,cAACvE,EAAA,EAAD,CACEK,QAAQ,KACRpB,GAAK,CAAEuF,GAAI,EAAGvE,WAAY,UAAWS,UAAW,UAChD+D,cAAY,EAHd,SAKGN,mBAAmBhB,EAAUI,GAAgBO,YAE/ClF,KAAK8F,cAAcvB,GACnBK,GACC,cAACxC,EAAA,EAAD,CACE/B,GAAK,CAAE0F,GAAI,GACXtE,QAAQ,YACR,cAAY,WACZY,QAAU,kBAAMoD,EAAWd,IAJ7B,yBAzEV,GAAkCrB,IAAMf,WCQ3ByD,EAAb,kDACE,WAAY/F,GAAQ,IAAD,8BACjB,cAAMA,IACDyE,MAAQ,CACXE,SAAS,EACTnC,MAAO,GACPkC,eAAgB,EAChBsB,YAAa,EACbC,iBAAkB,GAGpB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAZD,EADrB,qDAgBE,WACE,IAAQ1G,EAAWM,KAAKC,MAAhBP,OACRM,KAAKqG,WACL9C,EAAmBvD,KAAK0E,MAAOhF,KAnBnC,kCAsBE,YHrB2B,WAC3B,IAAM4G,EAAahH,KAAKC,MAAMC,aAAaC,QAAQ,UAE7CC,EAAS,CACbE,KAAM0G,EAAW5G,OAAOE,KACxBC,MAAOyG,EAAW5G,OAAOG,MACzBF,QAAS2G,EAAW5G,OAAOC,SAGvB4G,EAAajH,KAAKC,MAAMC,aAAaC,QAAQ,YAC/C8G,EACF/G,aAAasE,QAAQ,UAAWxE,KAAKyE,UAAL,sBAAmBwC,GAAnB,CAA+B7G,MAC1DF,aAAasE,QAAQ,UAAWxE,KAAKyE,UAAU,CAACrE,KGUrD8G,KAvBJ,yBA0BE,YAAyB,IAAD,OAAVC,EAAU,EAAVA,OACZ,EAAkCzG,KAAK0E,MAA/BjC,EAAR,EAAQA,MAAOkC,EAAf,EAAeA,eACf,EAA8B3E,KAAKC,MAA3BsE,EAAR,EAAQA,UAAW7E,EAAnB,EAAmBA,OACXgH,EAAenC,EAAUI,GAAzB+B,WAGFC,EAAM,CACVC,KAAM,EACNC,OAAQ,EACRC,KAAM,GAER9G,KAAK+G,SAAS,CAAEnC,SAAS,IAEL,mBAAhB6B,EAAO7G,MACTI,KAAK+G,UAAS,SAACC,GAAD,MAAgB,CAC5Bf,YACEe,EAAUf,YAZE,GAYwBxD,EAAQkE,EAAID,GAClDR,iBAAkBc,EAAUd,iBAAmB,MAC7C,WACF3C,EAAmB,EAAKmB,MAAOhF,QA7CvC,sBAkDE,WAAY,IAAD,OACTM,KAAK+G,SAAS,CAAEtE,MAAO,KACvB,IAAMwE,EAAYC,aAAY,WAC5B,EAAKH,UACH,SAACI,GAAD,MAAgB,CACd1E,MAAO0E,EAAU1E,MAAQ,MAE3B,WACE,MAA2B,EAAKiC,MAAxBjC,EAAR,EAAQA,MAAOmC,EAAf,EAAeA,SACXnC,GAAS,GAAKmC,KAChBwC,cAAcH,GACd,EAAKF,SAAS,CAAEnC,SAAS,UA/DlB,OAEnB,wBAoEE,SAAWD,GAAiB,IAAD,OACzB,EAA+B3E,KAAKC,MAA5BF,EAAR,EAAQA,QACJ4E,EADJ,EAAiBJ,UACc8C,OAAS,EACtCrH,KAAK+G,UACH,SAACI,GAAD,MAAgB,CACdxC,eAAgBwC,EAAUxC,eAAiB,EAC3CC,SAAS,MAEX,WACE,EAAKyB,cAITtG,EAAQuC,KAAK,2BAjFnB,oBAqFE,WACE,MAAuCtC,KAAKC,MAApCP,EAAR,EAAQA,OAAQ6E,EAAhB,EAAgBA,UAAWE,EAA3B,EAA2BA,QAC3B,EAA+CzE,KAAK0E,MAA5CjC,EAAR,EAAQA,MAAOkC,EAAf,EAAeA,eAAgBsB,EAA/B,EAA+BA,YAE/B,OACE,eAAC/F,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKC,GAAK,CAAEC,GAAI,GAArD,UACE,eAACC,EAAA,EAAD,CACEF,GAAK,CACHG,GAAI,EACJC,WAAY,UAHhB,UAME,cAACQ,EAAA,EAAD,CACEZ,GAAK,CAAEiH,OAAQ,GAAIC,MAAO,IAC1BrG,IAAMxB,EAAOmE,OACb1C,IAAI,wBAEN,cAACC,EAAA,EAAD,CAAYK,QAAQ,KAApB,SACG/B,EAAOE,OAEV,cAACwB,EAAA,EAAD,CACEK,QAAQ,KACRpB,GAAK,CAAEgB,WAAY,WAFrB,mBAIM4E,EAJN,aAMA,cAAC,EAAD,CAAaxD,MAAQA,IACrB,cAAC,EAAD,CACEiC,MAAQ1E,KAAK0E,MACbH,UAAYA,EACZE,QAAUA,EACVD,QAAUxE,KAAKmG,YACfV,WAAazF,KAAKyF,gBAGtB,oBACE+B,MAAQ,CACN9F,MAAO,UACP+F,gBAAiB,UACjBF,MAAO,MACPrD,YAAa,aAGjB,cAAC9C,EAAA,EAAD,CACEK,QAAQ,KACRtB,UAAU,MACVE,GAAK,CAAE2B,GAAI,EAAG1B,GAAI,EAAGe,WAAY,UAAWS,UAAW,UACvD+D,cAAY,EAJd,mBAMMlB,EAAiB,EANvB,eAhIR,GAA0BrB,IAAMf,WAkKjBmF,eALS,SAAC,GAAD,QAAGC,KAAH,MAAsC,CAC5DjI,OADsB,EAAWA,OAEjC6E,UAFsB,EAAmBA,aAK5BmD,CAAyBE,YAAW5D,EAAX4D,CAAmB5B,I,iCC9K9C6B,EAAkB,kBAClBC,EAAgB,gBAChBC,EAAe,e,2CCEfC,EAAgB,uCAAG,4BAAAC,EAAA,sEACRC,MAAM,qDACzBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW9I,aAAasE,QAAQ,QAASwE,EAAMA,UAHzB,cACxBC,EADwB,yBAIvBA,GAJuB,2CAAH,qDAOhBC,EAAiB,uCAAG,WAAOb,GAAP,mBAAAM,EAAA,6DACzBQ,EAAOC,IAAIf,EAAK/D,OAAO+E,WADE,SAEVT,MAAM,GAAD,OAXP,oCAWO,OAAmBO,IAAQN,MAAK,SAACS,GAAD,OAASA,EAAIA,OAFxC,cAEzB/E,EAFyB,OAIzBgF,EAJyB,2BAIVlB,GAJU,IAIJ9D,WAJI,kBAKxBgF,GALwB,2CAAH,sDAQjBC,EAAc,uCAAG,WAAOR,EAAOS,GAAd,mBAAAd,EAAA,6DACtBe,EAAeC,OAAOC,KAAKH,GAC7BI,EAAU,sDACdH,EAAaI,SAAQ,SAACC,EAASlE,GACH,QAAtB4D,EAASM,KACXF,GAAO,WAAQH,EAAa7D,GAArB,YAA+B4D,EAASM,QALvB,SAQNnB,MAAM,GAAD,OAAIiB,EAAJ,YAAeb,IACvCH,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC5D,GAAD,OAAeA,EAAU+E,WAVL,cAQtBf,EARsB,yBAWrBA,GAXqB,2CAAH,wDChBZ,SAASgB,IACtB,OACE,mCACE,uBACA,eAACnI,EAAA,EAAD,CACEf,GAAK,CAAE0F,GAAI,EAAGzF,GAAI,GAClBmB,QAAQ,QACRC,MAAM,iBACN8H,MAAM,SAJR,UAMG,QACD,cAACC,EAAA,EAAD,CAAM/H,MAAM,eAAe+E,OAAO,SAASiD,KAAK,4CAAhD,wBAGC,c,aCbM,SAASC,GAAT,GAAiC,IAATC,EAAQ,EAARA,KACrC,OACE,cAACC,EAAA,EAAD,CACExJ,GAAK,CAAEqB,MAAO,QACdkI,KAAOA,EAFT,SAIE,cAAC1G,EAAA,EAAD,CAAkBxB,MAAM,cCVf,WAA0B,mCCM1BsC,GANA,iBAAO,CACpB8F,KAAM,CACJC,UAAW,oE,qECcAC,GAdDC,aAAY,CACxBC,QAAS,CACP9F,WAAY,CACV+F,QAAS,WAEXC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,c,UCPG,SAASE,GAAT,GAAoD,IAA1B3K,EAAyB,EAAzBA,KAAM4K,EAAmB,EAAnBA,OAAQhG,EAAW,EAAXA,QACrD,OACE,eAACiG,EAAA,EAAD,CACEC,SAAWlG,EACXmG,QAAM,EACNC,MAAK,UAAMhL,EAAK,GAAGiL,eAAd,OAA8BjL,EAAKkL,OAAO,IAC/ClL,KAAOA,EAJT,UAME,cAACmL,GAAA,EAAD,CAAU5H,MAAM,MAAhB,iBAGU,aAATvD,EACC4K,EAAOvF,KAAI,SAACU,GAAD,OACT,cAACoF,GAAA,EAAD,CAA8B5H,MAAQwC,EAAS/F,KAA/C,SACG+F,EAAS/F,MADI+F,EAASN,OAMzBmF,EAAOvF,KAAI,SAAC9B,GAAD,MACC,eAAVA,EAEI,cAAC4H,GAAA,EAAD,CAAwB5H,MAAM,UAA9B,SACGA,GADW,WAKd,cAAC4H,GAAA,EAAD,CAAwB5H,MAAQA,EAAM6H,cAAtC,SACG7H,GADaA,S,cC1BjB,SAAS8H,GAAT,GAAmD,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aAC/C,OACE,eAACC,GAAA,EAAD,CACExB,KAAOsB,EACPG,QAAU,kBAAMF,GAAa,IAC7B,kBAAgB,qBAChB,mBAAiB,2BAJnB,UAME,cAACG,GAAA,EAAD,CAAajG,GAAG,qBAAhB,wEAGA,cAACkG,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,CAAmBnG,GAAG,2BAAtB,mEAIF,cAACoG,GAAA,EAAD,UACE,cAACrJ,EAAA,EAAD,CACEC,QAAU,kBAAM8I,GAAa,IAC7BO,WAAS,EAFX,wBCsFR,IAIehE,eAAQ,MAJI,SAACiE,GAAD,MAAe,CACxCC,aAAc,SAACC,GAAD,OAAaF,ETvGI,SAACE,GAAD,MAAc,CAAErG,KAAMuC,EAAc8D,WSuG/BC,CAAkBD,QAGzCnE,EAnGf,YAAoE,IAAhDqE,EAA+C,EAA/CA,gBAAiBH,EAA8B,EAA9BA,aAAcI,EAAgB,EAAhBA,aACjD,EAAwCC,oBAAS,GAAjD,oBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,oBAAOf,EAAP,KAAkBC,EAAlB,KACA,EAAgCc,mBAAS,CACvCtG,SAAU,MACVe,WAAY,MACZlB,KAAM,QAHR,oBAAOuD,EAAP,KAAiBqD,EAAjB,KAKMC,EAAa/M,KAAKC,MAAMC,aAAaC,QAAQ,eAkBnD,SAAS6M,EAAT,GAAoD,IAAD,IAA3B7F,OAAU7G,EAAiB,EAAjBA,KAAMuD,EAAW,EAAXA,MACtC,GAAa,aAATvD,EAAqB,CACvB,IAAM2M,EAAMF,EACTG,MAAK,SAAC7G,GAAD,OAAcA,EAAS/F,OAASuD,KACxCiJ,EAAY,2BAAKrD,GAAN,kBACRnJ,EAAO2M,EAAMA,EAAIlH,GAAK,cAGzB+G,EAAY,2BAAKrD,GAAN,kBACRnJ,EAAOuD,KAKd,OACE,eAACiI,GAAA,EAAD,CAAQxB,KAAOoC,EAAf,UACE,cAACV,GAAA,EAAD,CAAamB,UAAQ,EAACpH,GAAG,qBAAzB,SACE,eAACxE,EAAA,EAAD,CACEC,WAAS,EACT4L,UAAU,MACVjM,WAAW,SACXuC,eAAe,SAJjB,UAME,cAAC5B,EAAA,EAAD,CAAYK,QAAQ,KAAKpB,GAAK,CAAEiB,SAAU,IAA1C,sBAGA,cAACqL,GAAA,EAAD,CAAkBtM,GAAK,CAAEiB,SAAU,WAGvC,cAACiK,GAAA,EAAD,UACE,eAAChL,EAAA,EAAD,CAAOQ,QAAU,EAAIV,GAAK,CAAE0F,GAAI,GAAhC,UACE,cAACwE,GAAD,CACE3K,KAAK,WACL4K,OAAS6B,EACT7H,QAAU8H,IAEZ,cAAC/B,GAAD,CACE3K,KAAK,aACL4K,OAAS,CAAC,OAAQ,SAAU,QAC5BhG,QAAU8H,IAEZ,cAAC/B,GAAD,CACE3K,KAAK,OACL4K,OAAS,CAAC,WAAY,cACtBhG,QAAU8H,SAIhB,cAACb,GAAA,EAAD,UACE,cAACrJ,EAAA,EAAD,CACEX,QAAQ,YACR+D,KAAK,SACLnD,QApER,WACEuJ,EAAa7C,GACboD,GAAgB,GAChB,IAAM7D,EAAQ9I,aAAaC,QAAQ,SACnCqJ,EAAeR,EAAOS,GACnBZ,MAAK,SAAC5D,GACAA,EAAU8C,QAIb0E,GAAgB,GAChBI,GAAgB,KAJhBhB,GAAa,GACbgB,GAAgB,QA6DhBT,WAAS,EACTtI,KAAK,SACL1B,MAAM,UACNrB,GAAK,CACH,UAAW,CAAEoH,gBAAiBuC,GAAME,QAAQI,UAAUD,OAR1D,oBAcF,cAACY,GAAD,CAAaC,UAAYA,EAAYC,aAAeA,IACpD,cAACxB,GAAD,CAAcC,KAAOsC,UCvFdU,I,OAAb,kDACE,WAAY3M,GAAQ,IAAD,sBAEjB,OADA,cAAMA,IACmCA,MAAjCP,OAAUE,EAAlB,EAAkBA,KAAMgE,EAAxB,EAAwBA,MAFP,OAGjB,EAAKc,MAAQ,CACXiD,KAAM,CACJ/H,OACAgE,SAEFsI,cAAc,EACdF,cAAc,GAEhB,EAAKM,aAAe,EAAKA,aAAalG,KAAlB,gBACpB,EAAKyG,aAAe,EAAKA,aAAazG,KAAlB,gBAEpB4B,IACGG,MAAK,WTCyBD,MAAM,wCACxCC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACkE,GAAD,OAAgB7M,aAAasE,QAAQ,aACzCxE,KAAKyE,UAAUsI,EAAWS,uBSFtB,EAAK/F,SAAS,CAAEmF,cAAc,OAjBjB,EADrB,gDAsBE,YAA0B,IAAXzF,EAAU,EAAVA,OACL7G,EAAgB6G,EAAhB7G,KAAMuD,EAAUsD,EAAVtD,MACdnD,KAAK+G,UAAS,SAACgG,GAAD,MAAgB,CAC5BpF,KAAK,2BACAoF,EAAUpF,MADX,kBAED/H,EAAOuD,UA3BhB,0BAgCE,SAAa6J,GACX,MAAyDhN,KAAKC,MAAtDgN,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,WAAYnE,EAAnC,EAAmCA,SAAUhJ,EAA7C,EAA6CA,QACrC4H,EAAS3H,KAAK0E,MAAdiD,KACFW,EAAQ9I,aAAaC,QAAQ,SACnCuN,EAAMG,iBACNnN,KAAK+G,SAAS,CAAEmF,cAAc,IAE9B1D,EAAkBb,GACfQ,MAAK,SAACzI,GACLwN,EAAWxN,GACXoJ,EAAeR,EAAOS,GACnBZ,MAAK,SAAC5D,GACL0I,EAAc1I,GACdxE,EAAQuC,KAAK,6BA7CzB,oBAkDE,WAAU,IAAD,OACCmC,EAAYzE,KAAKC,MAAjBwE,QACR,EAA6CzE,KAAK0E,MAA1CiD,EAAR,EAAQA,KAAMuE,EAAd,EAAcA,aAAcF,EAA5B,EAA4BA,aAC5B,OACE,cAAC9L,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,SACE,qCACE,cAACuJ,GAAD,CAAcC,KAAOsC,IACrB,cAAC,GAAD,CACEF,aAAeA,EACfD,gBAAkB,SAAC5I,GAAD,OAAW,EAAK4D,SAAS,CAAEiF,aAAc7I,OAE5D+I,GACC,eAAC3L,EAAA,EAAD,CACEJ,UAAU,OACViN,SAAWpN,KAAK6M,aAChB9L,QAAU,EACVV,GAAK,CAAEG,GAAI,GAJb,UAME,qBAAKU,IAAM4I,GAAOxE,UAAYb,EAAQqF,KAAO3I,IAAI,SACjD,cAACsJ,EAAA,EAAD,CACE7K,KAAK,OACL4F,KAAK,OACLoF,MAAM,QACNzH,MAAQwE,EAAK/H,KACbyN,aAAa,OACb3C,SAAW1K,KAAKsM,aAChBgB,UAAQ,IAEV,cAAC7C,EAAA,EAAD,CACE7K,KAAK,QACL4F,KAAK,QACLoF,MAAM,kBACNzH,MAAQwE,EAAK/D,MACbyJ,aAAa,QACb3C,SAAW1K,KAAKsM,aAChBiB,WACE,cAAC9D,EAAA,EAAD,CAAMC,KAAK,2BAA2BjD,OAAO,SAAS+G,UAAU,SAAhE,wBAKJ,cAACpL,EAAA,EAAD,CACEoD,KAAK,SACLiI,WAAS,EACTrI,UAAYuC,EAAK/H,KACjB6B,QAAQ,YACRC,MAAM,UALR,kBASA,cAACU,EAAA,EAAD,CACEoD,KAAK,SACLiI,WAAS,EACThM,QAAQ,YACRC,MAAM,YACNW,QAAU,kBAAM,EAAK0E,SAAS,CAAEiF,cAAc,KALhD,sBASA,cAACzC,EAAD,gBA7Gd,GAA+BjG,IAAMf,YAgItBmF,gBAVS,SAAC,GAAD,QAAGC,KAAH,MAAqC,CAC3DjI,OADsB,EAAWA,OAEjCqJ,SAFsB,EAAmBA,aAKhB,SAAC4C,GAAD,MAAe,CACxCsB,cAAe,SAACpB,GAAD,OAAaF,EVvII,SAACE,GAAD,MAAc,CAAErG,KAAMsC,EAAe+D,WUuIhC6B,CAAmB7B,KACxDqB,WAAY,SAACrB,GAAD,OAAaF,EVzIE,SAACE,GAAD,MAAc,CAAErG,KAAMqC,EAAiBgE,WUyIhC8B,CAAc9B,QAGnCnE,CACbE,YAAW5D,GAAX4D,CAAmBgF,K,kDC3IAgB,G,4JACnB,WACE,IACMrH,EAAajH,KAAKC,MAAMC,aAAaC,QAAQ,YAC3CM,EAAYC,KAAKC,MAAjBF,QACR,OACE,cAACG,EAAA,EAAD,CAAWC,UAAU,OAArB,SACE,eAACI,EAAA,EAAD,CACEF,GAAK,CACHI,WAAY,SACZD,GAAI,GAHR,UAME,eAACK,EAAA,EAAD,CACEC,WAAS,EACT4L,UAAU,MACVjM,WAAW,SACXuC,eAAe,SACf3C,GAAK,CAAEuF,GAAI,GALb,UAOE,cAACxE,EAAA,EAAD,CAAYK,QAAQ,KAAKpB,GAAK,CAAEiB,SAAU,IAA1C,yBAGA,cAACuM,GAAA,EAAD,CAAoBxN,GAAK,CAAEiB,SAAU,SAEvC,eAACZ,EAAA,EAAD,CACEe,QAAQ,WACRpB,GAAK,CACHkH,MAAO,IACPxF,GAAI,EACJzB,GAAI,EACJqB,QAAS,OACTC,cAAe,SACfnB,WAAY,UARhB,UAUE,cAACqN,GAAA,EAAD,CAAMzN,GAAK,CAAE4B,GAAI,GAAjB,SACGsE,GACAA,EAAWvB,MAAK,SAAC+I,EAAOC,GAAR,OAAoBA,EAAQnO,MAAQkO,EAAMlO,SAC1DoF,KAAI,SAAC0C,EAAMxC,GAAP,OACHA,EArCG,IAsCD,eAAC8I,GAAA,EAAD,CAAwBC,SAAO,EAA/B,UACE,cAAC9M,EAAA,EAAD,CAAYK,QAAQ,KAAKpB,GAAK,CAAEiB,SAAU,IAA1C,SACG6D,EAAQ,IAEX,cAACgJ,GAAA,EAAD,CAAgB9N,GAAK,CAAE+N,GAAI,GAA3B,SACE,cAACnN,EAAA,EAAD,CACEZ,GAAK,CAAEkH,MAAO,GAAID,OAAQ,IAC1BpG,IAAMyG,EAAKhI,YAGf,cAAC0O,GAAA,EAAD,CACEjE,QAAUzC,EAAK/H,KACf0K,UACE,eAAClJ,EAAA,EAAD,CACEf,GAAK,CAAEsB,QAAS,SAAUN,WAAY,QACtClB,UAAU,OACVsB,QAAQ,QACRC,MAAM,eAJR,UAMGiG,EAAK9H,MACL,IAPH,gBAbUsF,QA6BtB,cAAC/C,EAAA,EAAD,CACEX,QAAQ,YACR+D,KAAK,SACL,cAAY,cACZnD,QAAU,kBAAMtC,EAAQuC,KAAK,iBAJ/B,oC,GArEyBgB,IAAMf,WCC5B,SAAS+L,KACtB,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,eAAerO,UAAYsO,KAC7C,cAAC,IAAD,CAAOD,KAAK,oBAAoBrO,UAAYuO,IAC5C,cAAC,IAAD,CAAOF,KAAK,wBAAwBrO,UAAYf,IAChD,cAAC,IAAD,CAAOoP,KAAK,uBAAuBrO,UAAYyN,Q,iCCX/Ce,GAAgB,CACpBjP,OAAQ,CACNE,KAAM,GACNgE,MAAO,IAETW,UAAW,GACXwE,SAAU,CACRpD,SAAU,MACVe,WAAY,MACZlB,KAAM,QAiBKoJ,GAbK,WAAoC,IAAnClK,EAAkC,uDAA1BiK,GAAeE,EAAW,uCACrD,OAAQA,EAAOrJ,MACf,KAAKqC,EACH,OAAO,2BAAKnD,GAAZ,IAAmBhF,OAAQmP,EAAOhD,UACpC,KAAK/D,EACH,OAAO,2BAAKpD,GAAZ,IAAmBH,UAAWsK,EAAOhD,UACvC,KAAK9D,EACH,OAAO,2BAAKrD,GAAZ,IAAmBqE,SAAU8F,EAAOhD,UACtC,QACE,OAAOnH,ICpBIoK,GADKC,2BAAgB,CAAEpH,UCEhCqH,GAAQC,uBACZH,GACAI,+BAAoBC,2BAAgBC,QAGlCC,OAAOC,UACTD,OAAOL,MAAQA,IAGFA,UCFKO,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCJNC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUZ,MAAQA,GAAlB,SACE,eAAC,IAAD,CAAehF,MAAQA,GAAvB,UACE,cAAC6F,EAAA,EAAD,IACA,cAAC,GAAD,WAINC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/H,MAAK,SAAAgI,GACjCA,EAAaC,kB","file":"static/js/main.a3066ad7.chunk.js","sourcesContent":["/* eslint-disable react/jsx-max-depth */\nimport PropTypes from 'prop-types';\nimport { Avatar, Button, Container, Grid,\n  Paper, Typography, Stack } from '@mui/material';\nimport React, { Component } from 'react';\n\nexport default class Feedback extends Component {\n  render() {\n    const SMALL_SCREEN_FONT_SIZE = 'h6.fontSize';\n    const userData = JSON.parse(localStorage.getItem('state'));\n    const THREE_QUESTIONS = 3;\n    const { player: { picture, name, score, assertions } } = userData;\n    const { history } = this.props;\n    return (\n      <Container component=\"main\" maxWidth=\"md\" sx={ { pb: 5 } }>\n        <Stack\n          sx={ {\n            my: 4,\n            alignItems: 'center',\n          } }\n        >\n          <Paper sx={ { my: 1, mx: 'auto', p: 2 } }>\n            <Grid container spacing={ 2 }>\n              <Grid item>\n                <Avatar\n                  data-testid=\"header-profile-picture\"\n                  src={ picture }\n                  alt=\"avatar\"\n                />\n              </Grid>\n              <Grid item>\n                <Typography\n                  sx={ { fontWeight: 'bold',\n                    fontSize: {\n                      xs: 18,\n                      sm: SMALL_SCREEN_FONT_SIZE,\n                    } } }\n                  variant=\"h6\"\n                  color=\"text.secondary\"\n                >\n                  {name}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Paper>\n          <Paper\n            variant=\"outlined\"\n            sx={ {\n              p: 3,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center' } }\n          >\n            <Paper elevation=\"3\" sx={ { textAlign: 'center', p: 1, px: 2 } }>\n              <Typography\n                variant=\"h5\"\n                color=\"text.primary\"\n              >\n                {`Score: ${score} points`}\n              </Typography>\n            </Paper>\n            <Typography\n              sx={ { pt: 2,\n                pb: 1,\n                fontSize: {\n                  xs: 16,\n                  sm: SMALL_SCREEN_FONT_SIZE,\n                },\n                fontWeight: 'regular' } }\n              color=\"text.primary\"\n            >\n              {`You scored ${assertions} out of 5 questions`}\n            </Typography>\n            {assertions >= THREE_QUESTIONS\n                && (\n                  <Typography\n                    sx={ { mb: 2,\n                      fontStyle: 'oblique',\n                      fontWeight: 'regular',\n                      textDecoration: 'underline',\n                      fontSize: {\n                        xs: 18,\n                        sm: SMALL_SCREEN_FONT_SIZE,\n                      } } }\n                  >\n                    Good Job!\n                  </Typography>\n                )}\n            <Button\n              variant=\"outlined\"\n              data-testid=\"btn-play-again\"\n              color=\"primary\"\n              onClick={ () => history.push('/trivia-game') }\n              sx={ { mb: 1 } }\n            >\n              Play Again\n            </Button>\n            <Button\n              variant=\"contained\"\n              data-testid=\"btn-ranking\"\n              color=\"primary\"\n              onClick={ () => history.push('/trivia-game/ranking') }\n            >\n              Ranking\n            </Button>\n          </Paper>\n        </Stack>\n      </Container>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { TimerTwoTone } from '@mui/icons-material';\nimport { CircularProgress, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React from 'react';\n\nexport default class TimeCounter extends React.Component {\n  render() {\n    const { timer } = this.props;\n    const ONE_PERCENT = 3.33;\n    return (\n      <Box\n        sx={ {\n          position: 'relative', display: 'inline-flex',\n        } }\n      >\n        <Box\n          sx={ {\n            top: 0,\n            left: 0,\n            bottom: 25,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          } }\n        >\n          <TimerTwoTone sx={ { fontSize: 20 } } />\n        </Box>\n        <CircularProgress\n          variant=\"determinate\"\n          value={ timer * ONE_PERCENT }\n          sx={ { color: '#006600' } }\n          size={ 70 }\n          thickness={ 3 }\n        />\n        <Box\n          sx={ {\n            top: 22,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          } }\n        >\n          <Typography\n            sx={ { fontWeight: 600, fontSize: 26 } }\n            variant=\"h6\"\n            component=\"div\"\n            color=\"text.secondary\"\n          >\n            {timer}\n          </Typography>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nTimeCounter.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n","export const updateLocalStorage = ({ PlayerAssertions, PlayerScore }, player) => {\n  const localStorageObj = {\n    player: {\n      name: player.name,\n      assertions: PlayerAssertions,\n      score: PlayerScore,\n      gravatarEmail: player.email,\n      picture: player.avatar,\n    },\n  };\n  localStorage.setItem('state', JSON.stringify(localStorageObj));\n};\n\nexport const updateRanking = () => {\n  const playerInfo = JSON.parse(localStorage.getItem('state'));\n\n  const player = {\n    name: playerInfo.player.name,\n    score: playerInfo.player.score,\n    picture: playerInfo.player.picture,\n  };\n\n  const getRanking = JSON.parse(localStorage.getItem('ranking'));\n  if (getRanking) {\n    localStorage.setItem('ranking', JSON.stringify([...getRanking, player]));\n  } else localStorage.setItem('ranking', JSON.stringify([player]));\n};\n","const styles = () => ({\n  disabledGreen: {\n    '&:disabled': {\n      borderColor: 'black !important',\n      border: '3px solid black !important',\n      background: 'linear-gradient(45deg, #1df401 30%, #1df401 90%)',\n      color: '#212121 !important',\n    },\n  },\n  disabledRed: {\n    '&:disabled': {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    },\n  },\n});\n\nexport default styles;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Paper, Stack, Typography } from '@mui/material';\n\nexport class QuestionBody extends React.Component {\n  randomAnswers(questions) {\n    const { handler, classes, state: { questionNumber, clicked } } = this.props;\n    const allQuestions = [\n      questions[questionNumber].correct_answer,\n      ...questions[questionNumber].incorrect_answers,\n    ].sort();\n    return (\n      <Stack spacing={ 2 }>\n        {allQuestions.map((question, index) => {\n          if (question === questions[questionNumber].correct_answer) {\n            return (\n              <Button\n                name=\"correct-answer\"\n                variant=\"outlined\"\n                onClick={ handler }\n                data-testid=\"correct-answer\"\n                disabled={ clicked }\n                id=\"correct\"\n                className={ classes.disabledGreen }\n                key={ index }\n              >\n                {decodeURIComponent(question)}\n              </Button>\n            );\n          }\n          return (\n            <Button\n              variant=\"outlined\"\n              type=\"button\"\n              disabled={ clicked }\n              id={ index }\n              className={ classes.disabledRed }\n              key={ index }\n              data-testid={ `wrong-answer-${index}` }\n              onClick={ handler }\n            >\n              {decodeURIComponent(question)}\n            </Button>\n          );\n        })}\n      </Stack>\n    );\n  }\n\n  render() {\n    const { nextButton, questions, state: { questionNumber, clicked } } = this.props;\n    return (\n      <Paper\n        variant=\"outlined\"\n        sx={ {\n          maxWidth: { xs: '80%' },\n          my: { xs: 1, md: 2 },\n          p: 2,\n          pb: 5,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center' } }\n      >\n        <Paper elevation=\"3\" sx={ { textAlign: 'center', p: 1 } }>\n          <Typography sx={ { fontSize: { xs: 18, md: 20 }, fontWeight: 'bold' } }>\n            {decodeURIComponent(questions[questionNumber].category)}\n          </Typography>\n        </Paper>\n        <Typography\n          variant=\"h6\"\n          sx={ { py: 3, fontWeight: 'regular', textAlign: 'center' } }\n          gutterBottom\n        >\n          {decodeURIComponent(questions[questionNumber].question)}\n        </Typography>\n        {this.randomAnswers(questions)}\n        {clicked && (\n          <Button\n            sx={ { mt: 2 } }\n            variant=\"contained\"\n            data-testid=\"btn-next\"\n            onClick={ () => nextButton(questionNumber) }\n          >\n            Next\n          </Button>\n        )}\n      </Paper>\n    );\n  }\n}\n\nQuestionBody.propTypes = {\n  classes: PropTypes.shape({\n    disabledGreen: PropTypes.string,\n    disabledRed: PropTypes.string,\n  }).isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  state: PropTypes.shape({\n    clicked: PropTypes.bool.isRequired,\n    questionNumber: PropTypes.number,\n  }).isRequired,\n  handler: PropTypes.func.isRequired,\n  nextButton: PropTypes.func.isRequired,\n};\n\nexport default (QuestionBody);\n","import { Container, Typography, Avatar, Stack } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport TimeCounter from './TimeCounter';\nimport { updateLocalStorage, updateRanking } from '../../services/helperServices';\nimport styles from './styles';\nimport { QuestionBody } from './QuestionBody';\n\nconst ONE_SECOND = 1000;\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: false,\n      timer: 30,\n      questionNumber: 0,\n      playerScore: 0,\n      playerAssertions: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.setTimer = this.setTimer.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n  }\n\n  componentDidMount() {\n    const { player } = this.props;\n    this.setTimer();\n    updateLocalStorage(this.state, player);\n  }\n\n  componentWillUnmount() {\n    updateRanking();\n  }\n\n  handleClick({ target }) {\n    const { timer, questionNumber } = this.state;\n    const { questions, player } = this.props;\n    const { difficulty } = questions[questionNumber];\n    const baseScore = 10;\n\n    const obj = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    this.setState({ clicked: true });\n\n    if (target.name === 'correct-answer') {\n      this.setState((prevstate) => ({\n        playerScore:\n          prevstate.playerScore + baseScore + timer * obj[difficulty],\n        playerAssertions: prevstate.playerAssertions + 1,\n      }), () => {\n        updateLocalStorage(this.state, player);\n      });\n    }\n  }\n\n  setTimer() {\n    this.setState({ timer: 30 });\n    const countdown = setInterval(() => {\n      this.setState(\n        (prevState) => ({\n          timer: prevState.timer - 1,\n        }),\n        () => {\n          const { timer, clicked } = this.state;\n          if (timer <= 0 || clicked) {\n            clearInterval(countdown);\n            this.setState({ clicked: true });\n          }\n        },\n      );\n    }, ONE_SECOND);\n  }\n\n  nextButton(questionNumber) {\n    const { history, questions } = this.props;\n    if (questionNumber < questions.length - 1) {\n      this.setState(\n        (prevState) => ({\n          questionNumber: prevState.questionNumber + 1,\n          clicked: false,\n        }),\n        () => {\n          this.setTimer();\n        },\n      );\n    } else {\n      history.push('/trivia-game/feedback');\n    }\n  }\n\n  render() {\n    const { player, questions, classes } = this.props;\n    const { timer, questionNumber, playerScore } = this.state;\n\n    return (\n      <Container component=\"main\" maxWidth=\"md\" sx={ { pb: 5 } }>\n        <Stack\n          sx={ {\n            my: 4,\n            alignItems: 'center',\n          } }\n        >\n          <Avatar\n            sx={ { height: 60, width: 60 } }\n            src={ player.avatar }\n            alt=\"Player Image Avatar\"\n          />\n          <Typography variant=\"h6\">\n            {player.name}\n          </Typography>\n          <Typography\n            variant=\"h6\"\n            sx={ { fontWeight: 'regular' } }\n          >\n            {`${playerScore} Points`}\n          </Typography>\n          <TimeCounter timer={ timer } />\n          <QuestionBody\n            state={ this.state }\n            questions={ questions }\n            classes={ classes }\n            handler={ this.handleClick }\n            nextButton={ this.nextButton }\n          />\n        </Stack>\n        <hr\n          style={ {\n            color: '#000000',\n            backgroundColor: '#000000',\n            width: '80%',\n            borderColor: '#000000',\n          } }\n        />\n        <Typography\n          variant=\"h6\"\n          component=\"div\"\n          sx={ { pt: 2, pb: 4, fontWeight: 'regular', textAlign: 'center' } }\n          gutterBottom\n        >\n          {`${questionNumber + 1}/5`}\n        </Typography>\n      </Container>\n    );\n  }\n}\n\nGame.propTypes = {\n  classes: PropTypes.shape({\n    disabledGreen: PropTypes.string,\n    disabledRed: PropTypes.string,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  player: PropTypes.shape({\n    avatar: PropTypes.string,\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = ({ user: { player, questions } }) => ({\n  player,\n  questions,\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(Game));\n","export const SET_PLAYER_INFO = 'SET_PLAYER_INFO';\nexport const SET_QUESTIONS = 'SET_QUESTIONS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const setPlayerInfo = (payload) => ({ type: SET_PLAYER_INFO, payload });\nexport const setPlayerQuestions = (payload) => ({ type: SET_QUESTIONS, payload });\nexport const setPlayerSettings = (payload) => ({ type: SET_SETTINGS, payload });\n","import md5 from 'crypto-js/md5';\n\nconst GRAVATAR_URL = 'https://www.gravatar.com/avatar/';\n\nexport const fetchPlayerToken = async () => {\n  const request = await fetch('https://opentdb.com/api_token.php?command=request')\n    .then((response) => response.json())\n    .then((token) => localStorage.setItem('token', token.token));\n  return request;\n};\n\nexport const fetchSetPlayerImg = async (user) => {\n  const hash = md5(user.email).toString();\n  const avatar = await fetch(`${GRAVATAR_URL}${hash}`).then((url) => url.url);\n\n  const newUser = { ...user, avatar };\n  return newUser;\n};\n\nexport const fetchQuestions = async (token, settings) => {\n  const settingsKeys = Object.keys(settings);\n  let apiCall = 'https://opentdb.com/api.php?amount=5&encode=url3986';\n  settingsKeys.forEach((setting, index) => {\n    if (settings[setting] !== 'All') {\n      apiCall += `&${settingsKeys[index]}=${settings[setting]}`;\n    }\n  });\n  const request = await fetch(`${apiCall}&${token}`)\n    .then((response) => response.json())\n    .then((questions) => questions.results);\n  return request;\n};\n\nexport const fetchCategories = () => fetch('https://opentdb.com/api_category.php')\n  .then((response) => response.json())\n  .then((categories) => localStorage.setItem('categories',\n    JSON.stringify(categories.trivia_categories)));\n","import { Link, Typography } from '@mui/material';\nimport React from 'react';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <hr />\n      <Typography\n        sx={ { mt: 2, pb: 2 } }\n        variant=\"body2\"\n        color=\"text.secondary\"\n        align=\"center\"\n      >\n        {'© '}\n        <Link color=\"text.primary\" target=\"_blank\" href=\"https://github.com/matheuspor/trivia-game\">\n          matheuspor\n        </Link>\n        {' 2021'}\n      </Typography>\n    </footer>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { Backdrop, CircularProgress } from '@mui/material';\nimport React from 'react';\n\nexport default function BackdropComp({ open }) {\n  return (\n    <Backdrop\n      sx={ { color: '#fff' } }\n      open={ open }\n    >\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>);\n}\n\nBackdropComp.propTypes = {\n  open: PropTypes.bool.isRequired,\n};\n","export default __webpack_public_path__ + \"static/media/trivia.7e9181d3.png\";","const styles = () => ({\n  logo: {\n    animation: 'shake infinite 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both',\n  },\n});\n\nexport default styles;\n","import { createTheme } from '@mui/material';\n\nconst theme = createTheme({\n  palette: {\n    background: {\n      default: '#fafafa',\n    },\n    primary: {\n      main: '#212121',\n    },\n    secondary: {\n      main: '#9e9e9e',\n    },\n  },\n});\n\nexport default theme;\n","import PropTypes from 'prop-types';\nimport { TextField, MenuItem } from '@mui/material';\nimport React from 'react';\n\nexport default function SettingsSelect({ name, values, handler }) {\n  return (\n    <TextField\n      onChange={ handler }\n      select\n      label={ `${name[0].toUpperCase()}${name.substr(1)}` }\n      name={ name }\n    >\n      <MenuItem value=\"All\">\n        All\n      </MenuItem>\n      {name === 'category' ? (\n        values.map((category) => (\n          <MenuItem key={ category.id } value={ category.name }>\n            {category.name}\n          </MenuItem>\n        ))\n      )\n        : (\n          values.map((value) => (\n            value === 'True/False'\n              ? (\n                <MenuItem key=\"boolean\" value=\"boolean\">\n                  {value}\n                </MenuItem>\n              )\n              : (\n                <MenuItem key={ value } value={ value.toLowerCase() }>\n                  {value}\n                </MenuItem>\n              )\n          ))\n        )}\n    </TextField>\n  );\n}\n\nSettingsSelect.propTypes = {\n  handler: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  values: PropTypes.arrayOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object])).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Button, Dialog, DialogActions,\n  DialogContent, DialogContentText, DialogTitle } from '@mui/material';\nimport React from 'react';\n\nexport default function ErrorDialog({ openError, setOpenError }) {\n  return (\n    <Dialog\n      open={ openError }\n      onClose={ () => setOpenError(false) }\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Error: Unable to find questions with the current settings.\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Please change the Category, Difficulty and/or Type.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={ () => setOpenError(false) }\n          autofocus\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nErrorDialog.propTypes = {\n  openError: PropTypes.bool.isRequired,\n  setOpenError: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Button, DialogActions,\n  DialogContent, DialogTitle, Typography, Grid, Stack, Dialog } from '@mui/material';\nimport { SettingsOutlined } from '@mui/icons-material';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchQuestions } from '../../services/apiHelper';\nimport BackdropComp from '../../components/Backdrop';\nimport theme from '../../theme';\nimport SettingsSelect from './SettingsSelect';\nimport { setPlayerSettings } from '../../store/actions';\nimport ErrorDialog from './ErrorDialog';\n\nfunction Settings({ setOpenSettings, sendSettings, openSettings }) {\n  const [openBackdrop, setOpenBackdrop] = useState(false);\n  const [openError, setOpenError] = useState(false);\n  const [settings, setSettings] = useState({\n    category: 'All',\n    difficulty: 'All',\n    type: 'All',\n  });\n  const categories = JSON.parse(localStorage.getItem('categories'));\n\n  function handleClick() {\n    sendSettings(settings);\n    setOpenBackdrop(true);\n    const token = localStorage.getItem('token');\n    fetchQuestions(token, settings)\n      .then((questions) => {\n        if (!questions.length) {\n          setOpenError(true);\n          setOpenBackdrop(false);\n        } else {\n          setOpenSettings(false);\n          setOpenBackdrop(false);\n        }\n      });\n  }\n\n  function handleChange({ target: { name, value } }) {\n    if (name === 'category') {\n      const cat = categories\n        .find((category) => category.name === value);\n      setSettings({ ...settings,\n        [name]: cat ? cat.id : 'All',\n      });\n    } else {\n      setSettings({ ...settings,\n        [name]: value,\n      });\n    }\n  }\n\n  return (\n    <Dialog open={ openSettings }>\n      <DialogTitle dividers id=\"alert-dialog-title\">\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Typography variant=\"h2\" sx={ { fontSize: 42 } }>\n            Settings\n          </Typography>\n          <SettingsOutlined sx={ { fontSize: 50 } } />\n        </Grid>\n      </DialogTitle>\n      <DialogContent>\n        <Stack spacing={ 3 } sx={ { mt: 1 } }>\n          <SettingsSelect\n            name=\"category\"\n            values={ categories }\n            handler={ handleChange }\n          />\n          <SettingsSelect\n            name=\"difficulty\"\n            values={ ['Easy', 'Medium', 'Hard'] }\n            handler={ handleChange }\n          />\n          <SettingsSelect\n            name=\"type\"\n            values={ ['Multiple', 'True/False'] }\n            handler={ handleChange }\n          />\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          type=\"button\"\n          onClick={ handleClick }\n          autofocus\n          size=\"medium\"\n          color=\"primary\"\n          sx={ {\n            '&:hover': { backgroundColor: theme.palette.secondary.main },\n          } }\n        >\n          Save\n        </Button>\n      </DialogActions>\n      <ErrorDialog openError={ openError } setOpenError={ setOpenError } />\n      <BackdropComp open={ openBackdrop } />\n    </Dialog>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendSettings: (payload) => dispatch(setPlayerSettings(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(Settings);\n\nSettings.propTypes = {\n  setOpenSettings: PropTypes.func.isRequired,\n  sendSettings: PropTypes.func.isRequired,\n  openSettings: PropTypes.bool.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Stack, Button,\n  TextField, Link, Container } from '@mui/material';\nimport { withStyles } from '@material-ui/styles';\nimport { setPlayerInfo, setPlayerQuestions } from '../../store/actions';\nimport { fetchCategories, fetchPlayerToken,\n  fetchQuestions, fetchSetPlayerImg } from '../../services/apiHelper';\nimport Footer from './Footer/Footer';\nimport BackdropComp from '../../components/Backdrop';\nimport logo from '../../assets/trivia.png';\nimport styles from './styles';\nimport Settings from '../Settings';\nimport '../../App.css';\n\nexport class LoginPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const { player: { name, email } } = this.props;\n    this.state = {\n      user: {\n        name,\n        email,\n      },\n      openBackdrop: true,\n      openSettings: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    fetchPlayerToken()\n      .then(() => {\n        fetchCategories();\n        this.setState({ openBackdrop: false });\n      });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState((prevValue) => ({\n      user: {\n        ...prevValue.user,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleSubmit(event) {\n    const { sendQuestions, sendPlayer, settings, history } = this.props;\n    const { user } = this.state;\n    const token = localStorage.getItem('token');\n    event.preventDefault();\n    this.setState({ openBackdrop: true });\n\n    fetchSetPlayerImg(user)\n      .then((player) => {\n        sendPlayer(player);\n        fetchQuestions(token, settings)\n          .then((questions) => {\n            sendQuestions(questions);\n            history.push('/trivia-game/game');\n          });\n      });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { user, openBackdrop, openSettings } = this.state;\n    return (\n      <Container component=\"main\" maxWidth=\"xs\">\n        <>\n          <BackdropComp open={ openBackdrop } />\n          <Settings\n            openSettings={ openSettings }\n            setOpenSettings={ (value) => this.setState({ openSettings: value }) }\n          />\n          {openBackdrop || (\n            <Stack\n              component=\"form\"\n              onSubmit={ this.handleSubmit }\n              spacing={ 3 }\n              sx={ { my: 4 } }\n            >\n              <img src={ logo } className={ classes.logo } alt=\"logo\" />\n              <TextField\n                name=\"name\"\n                type=\"text\"\n                label=\"Name:\"\n                value={ user.name }\n                autoComplete=\"name\"\n                onChange={ this.handleChange }\n                required\n              />\n              <TextField\n                name=\"email\"\n                type=\"email\"\n                label=\"Gravatar email:\"\n                value={ user.email }\n                autoComplete=\"email\"\n                onChange={ this.handleChange }\n                helperText={\n                  <Link href=\"https://en.gravatar.com/\" target=\"_blank\" underline=\"always\">\n                    Gravatar\n                  </Link>\n                }\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                disabled={ !user.name }\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                Play\n              </Button>\n              <Button\n                type=\"button\"\n                fullWidth\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={ () => this.setState({ openSettings: true }) }\n              >\n                Settings\n              </Button>\n              <Footer />\n            </Stack>\n          )}\n        </>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user: { player, settings } }) => ({\n  player,\n  settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendQuestions: (payload) => dispatch(setPlayerQuestions(payload)),\n  sendPlayer: (payload) => dispatch(setPlayerInfo(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  withStyles(styles)(LoginPage),\n);\n\nLoginPage.propTypes = {\n  classes: PropTypes.shape({\n    logo: PropTypes.string,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  player: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  sendPlayer: PropTypes.func.isRequired,\n  sendQuestions: PropTypes.func.isRequired,\n  settings: PropTypes.shape({\n    category: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    difficulty: PropTypes.string,\n    type: PropTypes.string,\n  }).isRequired,\n};\n","import { Avatar, Button, Container, Grid, List, ListItem, ListItemAvatar,\n  ListItemText, Paper, Stack, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { EmojiEventsTwoTone } from '@mui/icons-material';\n\nexport default class Ranking extends React.Component {\n  render() {\n    const TOP_10 = 10;\n    const getRanking = JSON.parse(localStorage.getItem('ranking'));\n    const { history } = this.props;\n    return (\n      <Container component=\"main\">\n        <Stack\n          sx={ {\n            alignItems: 'center',\n            my: 4,\n          } }\n        >\n          <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            sx={ { py: 2 } }\n          >\n            <Typography variant=\"h2\" sx={ { fontSize: 40 } }>\n              Leaderboard\n            </Typography>\n            <EmojiEventsTwoTone sx={ { fontSize: 60 } } />\n          </Grid>\n          <Paper\n            variant=\"outlined\"\n            sx={ {\n              width: 250,\n              px: 2,\n              pb: 2,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center' } }\n          >\n            <List sx={ { mb: 2 } }>\n              {getRanking\n            && getRanking.sort((lower, greater) => greater.score - lower.score)\n              .map((user, index) => (\n                index < TOP_10 && (\n                  <ListItem key={ index } divider>\n                    <Typography variant=\"h6\" sx={ { fontSize: 18 } }>\n                      {index + 1}\n                    </Typography>\n                    <ListItemAvatar sx={ { ml: 1 } }>\n                      <Avatar\n                        sx={ { width: 45, height: 45 } }\n                        src={ user.picture }\n                      />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={ user.name }\n                      secondary={\n                        <Typography\n                          sx={ { display: 'inline', fontWeight: 'bold' } }\n                          component=\"span\"\n                          variant=\"body2\"\n                          color=\"text.primary\"\n                        >\n                          {user.score}\n                          {' '}\n                          Points\n                        </Typography>\n                      }\n                    />\n                  </ListItem>\n                )\n              ))}\n            </List>\n            <Button\n              variant=\"contained\"\n              type=\"button\"\n              data-testid=\"btn-go-home\"\n              onClick={ () => history.push('/trivia-game') }\n            >\n              Play Again\n            </Button>\n          </Paper>\n        </Stack>\n      </Container>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Feedback from './pages/Feedback';\nimport game from './pages/Game';\nimport Login from './pages/Login';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/trivia-game\" component={ Login } />\n      <Route path=\"/trivia-game/game\" component={ game } />\n      <Route path=\"/trivia-game/feedback\" component={ Feedback } />\n      <Route path=\"/trivia-game/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","import { SET_PLAYER_INFO, SET_QUESTIONS, SET_SETTINGS } from '../actions';\n\nconst INITIAL_STATE = {\n  player: {\n    name: '',\n    email: '',\n  },\n  questions: '',\n  settings: {\n    category: 'All',\n    difficulty: 'All',\n    type: 'All',\n  },\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_PLAYER_INFO:\n    return { ...state, player: action.payload };\n  case SET_QUESTIONS:\n    return { ...state, questions: action.payload };\n  case SET_SETTINGS:\n    return { ...state, settings: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\n\nconst rootReducer = combineReducers({ user });\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@emotion/react';\nimport { CssBaseline } from '@mui/material';\nimport App from './App';\n\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <ThemeProvider theme={ theme }>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}