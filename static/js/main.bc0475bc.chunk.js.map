{"version":3,"sources":["pages/Game.js","components/select.js","context/SettingsContext.js","services/apiHelper.js","pages/Settings.js","pages/Feedback.js","pages/Ranking.js","actions/index.js","trivia.png","components/PageButton.jsx","components/PageInput.jsx","theme.js","pages/Login.js","context/SettingsProvider.js","App.js","reducers/user.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Game","props","state","clicked","timer","questionNumber","PlayerScore","PlayerAssertions","handleClick","bind","setTimer","this","updateLocalStorage","playerInfo","JSON","parse","localStorage","getItem","player","name","score","picture","getRanking","setItem","stringify","target","difficulty","questions","obj","easy","medium","hard","setState","prevstate","countdown","setInterval","prevState","clearInterval","localStorageObj","assertions","gravatarEmail","email","avatar","allQuestions","correct_answer","incorrect_answers","sort","map","question","index","type","onClick","disabled","id","className","decodeURIComponent","history","length","push","alt","src","category","randomAnswers","nextButton","value","React","Component","connect","user","makeSelect","values","handler","TextField","onChange","select","label","toUpperCase","substr","MenuItem","trivia_categories","toLowerCase","SettingsContext","createContext","fetchPlayerToken","a","fetch","then","response","json","token","request","fetchPlayerImg","hash","fetchQuestions","settings","settingsKeys","Object","keys","apiCall","forEach","setting","results","fetchCategories","Settings","window","useState","open","setOpen","setSettings","useContext","setNewSetting","categories","handleChange","cat","find","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Grid","container","direction","justifyContent","mb","mt","Typography","variant","SettingsOutlined","fontSize","noValidate","FormControl","m","minWidth","Button","size","color","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autofocus","Feedback","to","Ranking","lower","greater","SET_PLAYER_INFO","SET_QUESTIONS","SET_SETTINGS","PageButton","setClick","fullWidth","CircularProgress","PageInput","margin","required","autoComplete","helperText","Link","href","underline","theme","createTheme","palette","background","default","primary","main","secondary","useStyles","makeStyles","logo","height","breakpoints","up","dispatch","sendQuestions","payload","setPlayerQuestions","sendPlayer","setPlayerInfo","useHistory","classes","setUser","useEffect","onSubmit","event","preventDefault","emailHash","md5","toString","url","SettingsProvider","children","setCategories","res","Provider","newSetting","App","exact","path","Login","game","INITIAL_STATE","userReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc0475bc.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: false,\n      timer: 30,\n      questionNumber: 0,\n      PlayerScore: 0,\n      PlayerAssertions: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.setTimer = this.setTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.setTimer();\n    this.updateLocalStorage();\n  }\n\n  componentWillUnmount() {\n    const playerInfo = JSON.parse(localStorage.getItem('state'));\n\n    const player = {\n      name: playerInfo.player.name,\n      score: playerInfo.player.score,\n      picture: playerInfo.player.picture,\n    };\n\n    const getRanking = JSON.parse(localStorage.getItem('ranking'));\n    if (getRanking) {\n      localStorage.setItem('ranking', JSON.stringify([...getRanking, player]));\n    } else localStorage.setItem('ranking', JSON.stringify([player]));\n  }\n\n  handleClick({ target }) {\n    const { timer, questionNumber } = this.state;\n    const { questions } = this.props;\n    const { difficulty } = questions[questionNumber];\n    const baseScore = 10;\n\n    const obj = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n\n    if (target.name === 'correct-answer') {\n      this.setState((prevstate) => ({\n        PlayerScore:\n          prevstate.PlayerScore + baseScore + timer * obj[difficulty],\n        PlayerAssertions: prevstate.PlayerAssertions + 1,\n      }));\n    }\n\n    this.setState(\n      {\n        clicked: true,\n      },\n      () => {\n        this.updateLocalStorage();\n      },\n    );\n  }\n\n  setTimer() {\n    const ONE_SECOND = 1000;\n    this.setState({ timer: 30 });\n    const countdown = setInterval(() => {\n      this.setState(\n        (prevState) => ({\n          timer: prevState.timer - 1,\n        }),\n        () => {\n          const { timer, clicked } = this.state;\n          if (timer <= 0 || clicked) {\n            clearInterval(countdown);\n            this.setState({ clicked: true });\n          }\n        },\n      );\n    }, ONE_SECOND);\n  }\n\n  updateLocalStorage() {\n    const { PlayerAssertions, PlayerScore } = this.state;\n    const { player } = this.props;\n\n    const localStorageObj = {\n      player: {\n        name: player.name,\n        assertions: PlayerAssertions,\n        score: PlayerScore,\n        gravatarEmail: player.email,\n        picture: player.avatar,\n      },\n    };\n\n    localStorage.setItem('state', JSON.stringify(localStorageObj));\n  }\n\n  randomAnswers(questions) {\n    const { questionNumber, clicked } = this.state;\n    const allQuestions = [\n      questions[questionNumber].correct_answer,\n      ...questions[questionNumber].incorrect_answers,\n    ].sort();\n    return (\n      <ul>\n        {allQuestions.map((question, index) => {\n          if (question === questions[questionNumber].correct_answer) {\n            return (\n              <button\n                type=\"button\"\n                onClick={ this.handleClick }\n                data-testid=\"correct-answer\"\n                disabled={ clicked }\n                id=\"correct\"\n                className={ clicked ? 'green-border' : '' }\n                name=\"correct-answer\"\n                key={ index }\n              >\n                {decodeURIComponent(question)}\n              </button>\n            );\n          }\n          return (\n            <button\n              type=\"button\"\n              disabled={ clicked }\n              id={ index }\n              className={ clicked ? 'red-border' : '' }\n              name=\"wrong-answer\"\n              key={ index }\n              data-testid={ `wrong-answer-${index}` }\n              onClick={ this.handleClick }\n            >\n              {decodeURIComponent(question)}\n            </button>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  nextButton(questionNumber) {\n    const { history, questions } = this.props;\n    if (questionNumber < questions.length - 1) {\n      this.setState(\n        (prevState) => ({\n          questionNumber: prevState.questionNumber + 1,\n          clicked: false,\n        }),\n        () => {\n          this.setTimer();\n        },\n      );\n    } else {\n      history.push('/trivia-game/feedback');\n    }\n  }\n\n  render() {\n    const { player, questions } = this.props;\n    const { timer, questionNumber, PlayerScore, clicked } = this.state;\n    return (\n      <div>\n        <p>{timer}</p>\n        <header>\n          <img\n            alt=\"avatar\"\n            data-testid=\"header-profile-picture\"\n            src={ player.avatar }\n          />\n          <h4 data-testid=\"header-player-name\">\n            Nome:\n            {player.name}\n            {' '}\n            <span data-testid=\"header-score\">\n              Score:\n              {PlayerScore}\n            </span>\n          </h4>\n        </header>\n        <div>\n          <p data-testid=\"question-category\">\n            Category:\n            {decodeURIComponent(questions[questionNumber].category)}\n          </p>\n          <h3 data-testid=\"question-text\">\n            {decodeURIComponent(questions[questionNumber].question)}\n          </h3>\n          {this.randomAnswers(questions)}\n        </div>\n        {clicked && (\n          <input\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ () => this.nextButton(questionNumber) }\n            value=\"Próxima\"\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  player: PropTypes.shape({\n    avatar: PropTypes.string,\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  questions: state.user.questions,\n  player: state.user.player,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import { TextField } from '@material-ui/core';\nimport { MenuItem } from '@mui/material';\nimport React from 'react';\n\nexport default function makeSelect(name, values, handler) {\n  return (\n    <TextField\n      onChange={ handler }\n      select\n      label={ `${name[0].toUpperCase()}${name.substr(1)}` }\n      name={ name }\n    >\n      <MenuItem value=\"All\">\n        All\n      </MenuItem>\n      {name === 'category' ? (\n        values.trivia_categories.map((category) => (\n          <MenuItem key={ category.id } value={ category.name }>\n            {category.name}\n          </MenuItem>\n        ))\n      )\n        : (\n          values.map((value) => (\n            value === 'True/False'\n              ? (\n                <MenuItem key=\"boolean\" value=\"boolean\">\n                  {value}\n                </MenuItem>\n              )\n              : (\n                <MenuItem key={ value } value={ value.toLowerCase() }>\n                  {value}\n                </MenuItem>\n              )\n          ))\n        )}\n    </TextField>\n  );\n}\n","import { createContext } from 'react';\n\nconst SettingsContext = createContext();\n\nexport default SettingsContext;\n","export const fetchPlayerToken = async () => {\n  const request = await fetch('https://opentdb.com/api_token.php?command=request')\n    .then((response) => response.json())\n    .then((token) => token.token);\n  return request;\n};\n\nexport const fetchPlayerImg = async (hash) => {\n  const request = await fetch(`https://www.gravatar.com/avatar/${hash}`);\n  return request;\n};\n\nexport const fetchQuestions = async (token, settings) => {\n  const settingsKeys = Object.keys(settings);\n  let apiCall = 'https://opentdb.com/api.php?amount=5&encode=url3986';\n  settingsKeys.forEach((setting, index) => {\n    if (settings[setting] !== 'All') {\n      apiCall += `&${settingsKeys[index]}=${settings[setting]}`;\n    }\n  });\n  const request = await fetch(`${apiCall}&${token}`)\n    .then((response) => response.json())\n    .then((questions) => questions.results);\n  return request;\n};\n\nexport const fetchCategories = async () => {\n  const request = await fetch('https://opentdb.com/api_category.php')\n    .then((response) => response.json());\n  return request;\n};\n","import { Button, Container, CssBaseline, Dialog, DialogActions,\n  DialogContent, DialogContentText,\n  DialogTitle, Typography } from '@material-ui/core';\nimport { Box } from '@material-ui/system';\nimport { SettingsOutlined } from '@mui/icons-material';\nimport { FormControl, Grid } from '@mui/material';\nimport React, { useContext, useState } from 'react';\nimport makeSelect from '../components/select';\nimport SettingsContext from '../context/SettingsContext';\nimport { fetchQuestions } from '../services/apiHelper';\n\nfunction Settings(window) {\n  const [open, setOpen] = useState(false);\n  const [settings, setSettings] = useState({\n    category: 'All',\n    difficulty: 'All',\n    type: 'All',\n  });\n  const { setNewSetting, categories } = useContext(SettingsContext);\n\n  function handleChange({ target: { name, value } }) {\n    if (name === 'category') {\n      const cat = categories.trivia_categories\n        .find((category) => category.name === value);\n      setSettings({ ...settings,\n        [name]: cat ? cat.id : 'All',\n      });\n    } else {\n      setSettings({ ...settings,\n        [name]: value,\n      });\n    }\n  }\n\n  function redirect() {\n    setNewSetting(settings);\n    const token = localStorage.getItem('token');\n    fetchQuestions(token, settings)\n      .then((questions) => {\n        if (!questions.length) {\n          setOpen(true);\n        } else {\n          window.history.push('/trivia-game');\n        }\n      });\n  }\n\n  const makeDialog = () => (\n    <Dialog\n      open={ open }\n      onClose={ () => setOpen(false) }\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Error: Unable to find questions with the current settings.\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Please change the Category, Difficulty and/or Type.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={ () => setOpen(false) } autofocus>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n\n  return (\n    <Container component=\"main\" maxWidth=\"sx\">\n      <CssBaseline />\n      <Box\n        sx={ {\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        } }\n      >\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          sx={ { mb: 2, mt: -2 } }\n        >\n          <Typography variant=\"h2\">\n            Settings\n          </Typography>\n          <SettingsOutlined sx={ { fontSize: 55 } } />\n        </Grid>\n        <Box component=\"form\" noValidate sx={ { mt: 1 } }>\n          <FormControl sx={ { m: 1, minWidth: 120 } }>\n            {makeSelect('category', categories, handleChange) }\n            <br />\n            {makeSelect('difficulty', ['Easy', 'Medium', 'Hard'], handleChange)}\n            <br />\n            {makeSelect('type', ['Multiple', 'True/False'], handleChange)}\n            <br />\n          </FormControl>\n        </Box>\n        <Button\n          type=\"button\"\n          onClick={ redirect }\n          variant=\"contained\"\n          size=\"medium\"\n          color=\"primary\"\n        >\n          Return\n        </Button>\n      </Box>\n      {makeDialog()}\n    </Container>\n  );\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Feedback extends Component {\n  render() {\n    const userData = JSON.parse(localStorage.getItem('state'));\n    const NUMBER = 3;\n    const { player } = userData;\n    return (\n      <div data-testid=\"feedback-text\">\n        <h1 data-testid=\"header-player-name\">{player.name}</h1>\n        <img\n          data-testid=\"header-profile-picture\"\n          src={ player.picture }\n          alt=\"avatar\"\n        />\n        <p data-testid=\"header-score\">{player.score}</p>\n        <p data-testid=\"feedback-total-score\">{player.score}</p>\n        <p data-testid=\"feedback-total-question\">{player.assertions}</p>\n        {player.assertions < NUMBER ? 'Podia ser melhor...' : 'Mandou bem!'}\n        <Link to=\"/trivia-game\">\n          <button type=\"button\" data-testid=\"btn-play-again\">Jogar novamente</button>\n        </Link>\n        <Link to=\"/trivia-game/ranking\">\n          <button type=\"button\" data-testid=\"btn-ranking\">Ver Ranking</button>\n        </Link>\n      </div>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n// import PropTypes from 'prop-types';\n\nexport default class Ranking extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    const getRanking = JSON.parse(localStorage.getItem('ranking'));\n    const { history } = this.props;\n    return (\n      <div>\n        <h2 data-testid=\"ranking-title\">Ranking</h2>\n        <ul>\n          {getRanking\n            && getRanking.sort((lower, greater) => greater.score - lower.score)\n              .map((user, index) => (\n                <li key={ index }>\n                  <span data-testid={ `player-name-${index}` }>{user.name}</span>\n                  <span data-testid={ `player-score-${index}` }>{user.score}</span>\n                </li>\n              ))}\n        </ul>\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/trivia-game') }\n        >\n          Play Again\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","export const SET_PLAYER_INFO = 'SET_PLAYER_INFO';\nexport const SET_QUESTIONS = 'SET_QUESTIONS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const setPlayerInfo = (payload) => ({ type: SET_PLAYER_INFO, payload });\nexport const setPlayerQuestions = (payload) => ({ type: SET_QUESTIONS, payload });\nexport const setPlayerSettings = (payload) => ({ type: SET_SETTINGS, payload });\n","export default __webpack_public_path__ + \"static/media/trivia.7e9181d3.png\";","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { Button, CircularProgress } from '@material-ui/core';\n\nexport default function PageButton({ name, user, handler }) {\n  const [clicked, setClick] = useState(false);\n\n  return (\n    (\n      <Button\n        type={ name === 'Play' ? 'submit' : 'button' }\n        fullWidth\n        disabled={ name === 'Play' && !user.name }\n        onClick={ () => (name === 'Play' ? setClick(true) : handler()) }\n        variant=\"contained\"\n        sx={ { mt: 3, mb: 2 } }\n        color={ name === 'Play' ? 'primary' : 'secondary' }\n      >\n        {clicked ? <CircularProgress color=\"secondary\" /> : name}\n      </Button>)\n  );\n}\n\nPageButton.propTypes = {\n  handler: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n","import { Link, TextField } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default function PageInput({ name, handler, value }) {\n  return (\n    <TextField\n      type={ name === 'email' ? 'email' : 'text' }\n      margin=\"normal\"\n      required={ name === 'name' }\n      fullWidth\n      id={ `${name[0].toUpperCase()}${name.substr(1)}` }\n      label={ name === 'email' ? 'Gravatar email:' : 'Name:' }\n      name={ name }\n      autoComplete={ name }\n      onChange={ handler }\n      value={ value }\n      helperText={ name === 'email' && (\n        <Link href=\"https://en.gravatar.com/\" target=\"_blank\" underline=\"always\">\n          Gravatar\n        </Link>\n      ) }\n    />\n  );\n}\n\nPageInput.propTypes = {\n  handler: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import { createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    background: {\n      default: '#fafafa',\n    },\n    primary: {\n      main: '#212121',\n    },\n    secondary: {\n      main: '#9e9e9e',\n    },\n  },\n});\n\nexport default theme;\n","import PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useState } from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Container, CssBaseline } from '@material-ui/core';\nimport { Box } from '@material-ui/system';\nimport { makeStyles } from '@material-ui/styles';\nimport { setPlayerInfo, setPlayerQuestions } from '../actions';\nimport '../App.css';\nimport logo from '../trivia.png';\nimport { fetchPlayerImg, fetchPlayerToken,\n  fetchQuestions } from '../services/apiHelper';\nimport SettingsContext from '../context/SettingsContext';\nimport PageButton from '../components/PageButton';\nimport PageInput from '../components/PageInput';\nimport theme from '../theme';\n\nconst useStyles = makeStyles(() => ({\n  logo: {\n    height: '6em',\n    [theme.breakpoints.up('sm')]: {\n      height: '9em',\n    },\n    marginBottom: '1em',\n    animation: 'shake infinite 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both',\n  },\n}));\nfunction Login({ sendQuestions, sendPlayer, player }) {\n  const { settings } = useContext(SettingsContext);\n  const history = useHistory();\n  const classes = useStyles();\n\n  const [user, setUser] = useState({\n    name: player.name,\n    email: player.email,\n  });\n\n  useEffect(() => {\n    fetchPlayerToken()\n      .then((token) => {\n        localStorage.setItem('token', token);\n        fetchQuestions(token, settings)\n          .then((questions) => sendQuestions(questions));\n      });\n  }, [settings, sendQuestions]);\n\n  function handleChange({ target }) {\n    const { name, value } = target;\n    setUser({ ...user, [name]: value });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const emailHash = md5(user.email).toString();\n    fetchPlayerImg(emailHash).then(({ url }) => {\n      setUser({ ...user, avatar: url });\n      sendPlayer({ ...user, avatar: url });\n      history.push('/trivia-game/game');\n    });\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={ {\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        } }\n      >\n        <img src={ logo } className={ classes.logo } alt=\"logo\" />\n        <Box component=\"form\" onSubmit={ handleSubmit } noValidate sx={ { mt: 1 } }>\n          <PageInput name=\"name\" value={ user.name } handler={ handleChange } />\n          <PageInput name=\"email\" value={ user.email } handler={ handleChange } />\n          <PageButton name=\"Play\" user={ user } />\n          <PageButton\n            name=\"Settings\"\n            user={ user }\n            handler={ () => history.push('/trivia-game/settings') }\n          />\n        </Box>\n      </Box>\n    </Container>\n  );\n}\n\nconst mapStateToProps = ({ user: { player } }) => ({\n  player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendQuestions: (payload) => dispatch(setPlayerQuestions(payload)),\n  sendPlayer: (payload) => dispatch(setPlayerInfo(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  player: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  sendPlayer: PropTypes.func.isRequired,\n  sendQuestions: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { fetchCategories } from '../services/apiHelper';\nimport SettingsContext from './SettingsContext';\n\nfunction SettingsProvider({ children }) {\n  const [settings, setSettings] = useState({\n    category: 'All',\n    difficulty: 'All',\n    type: 'All',\n  });\n\n  const [categories, setCategories] = useState();\n\n  function setNewSetting(newSetting) {\n    setSettings(newSetting);\n  }\n\n  useEffect(() => {\n    fetchCategories()\n      .then((res) => setCategories(res));\n  }, []);\n\n  return (\n    <SettingsContext.Provider\n      value={ { settings, setNewSetting, setCategories, categories } }\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\nSettingsProvider.propTypes = {\n  children: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default SettingsProvider;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport game from './pages/Game';\nimport settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport Login from './pages/Login';\nimport SettingsProvider from './context/SettingsProvider';\n\nexport default function App() {\n  return (\n    <SettingsProvider>\n      <Switch>\n        <Route exact path=\"/trivia-game\" component={ Login } />\n        <Route path=\"/trivia-game/game\" component={ game } />\n        <Route path=\"/trivia-game/settings\" component={ settings } />\n        <Route path=\"/trivia-game/feedback\" component={ Feedback } />\n        <Route path=\"/trivia-game/ranking\" component={ Ranking } />\n      </Switch>\n    </SettingsProvider>\n  );\n}\n","import { SET_PLAYER_INFO, SET_QUESTIONS, SET_SETTINGS } from '../actions';\n\nconst INITIAL_STATE = {\n  player: {\n    name: '',\n    email: '',\n  },\n  questions: '',\n  settings: {\n    category: 'All',\n    difficulty: 'All',\n    type: 'All',\n  },\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_PLAYER_INFO:\n    return { ...state, player: action.payload };\n  case SET_QUESTIONS:\n    return { ...state, questions: action.payload };\n  case SET_SETTINGS:\n    return { ...state, settings: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\n\nconst rootReducer = combineReducers({ user });\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@emotion/react';\nimport App from './App';\n\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <ThemeProvider theme={ theme }>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}