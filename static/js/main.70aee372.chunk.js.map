{"version":3,"sources":["components/TimeCounter.jsx","services/apiHelper.js","components/QuestionBody.jsx","pages/Game.js","components/Backdrop.jsx","actions/index.js","theme.js","components/ErrorDialog.jsx","components/SettingsSelect.jsx","pages/Settings.js","pages/Feedback.js","pages/Ranking.js","trivia.png","components/PageButton.jsx","components/PageInput.jsx","components/Footer.jsx","pages/Login.js","App.js","reducers/user.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["TimeCounter","timer","this","props","sx","position","display","top","left","bottom","right","alignItems","justifyContent","TimerTwoTone","fontSize","CircularProgress","variant","value","color","size","thickness","Typography","fontWeight","component","React","Component","fetchPlayerToken","a","fetch","then","response","json","token","localStorage","setItem","request","fetchPlayerImg","hash","fetchQuestions","settings","settingsKeys","Object","keys","apiCall","forEach","setting","index","questions","results","updateLocalStorage","player","PlayerAssertions","PlayerScore","localStorageObj","name","assertions","score","gravatarEmail","email","picture","avatar","JSON","stringify","QuestionBody","handler","classes","state","questionNumber","clicked","allQuestions","correct_answer","incorrect_answers","sort","flexDirection","map","question","Button","my","onClick","disabled","id","className","disabledGreen","decodeURIComponent","type","disabledRed","nextButton","Paper","maxWidth","xs","md","p","pb","elevation","textAlign","category","py","gutterBottom","randomAnswers","mt","Game","handleClick","bind","setTimer","playerInfo","parse","getItem","getRanking","updateRanking","target","difficulty","obj","easy","medium","hard","setState","prevstate","countdown","setInterval","prevState","clearInterval","history","length","push","Container","CssBaseline","Box","marginTop","Avatar","height","width","src","alt","style","backgroundColor","borderColor","pt","connect","user","withStyles","border","background","BackdropComp","open","Backdrop","SET_PLAYER_INFO","SET_QUESTIONS","SET_SETTINGS","theme","createTheme","palette","default","primary","main","secondary","ErrorDialog","openError","setOpenError","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autofocus","SettingsSelect","values","TextField","onChange","select","label","toUpperCase","substr","MenuItem","trivia_categories","toLowerCase","dispatch","sendSettings","payload","setPlayerSettings","openSettings","useState","openBackdrop","setOpenBackdrop","setSettings","categories","handleChange","cat","find","dividers","Grid","container","direction","SettingsOutlined","Stack","spacing","Feedback","mx","item","px","sm","mb","fontStyle","textDecoration","Ranking","EmojiEventsTwoTone","List","lower","greater","ListItem","divider","mr","ListItemAvatar","ml","ListItemText","PageButton","fullWidth","defaultProps","undefined","PageInput","margin","required","autoComplete","helperText","Link","href","underline","Footer","align","LoginPage","handleSubmit","prevValue","event","sendQuestions","sendPlayer","preventDefault","emailHash","md5","toString","url","currentState","logo","onSubmit","setPlayerQuestions","setPlayerInfo","breakpoints","up","App","exact","path","Login","game","INITIAL_STATE","userReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70aee372.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { TimerTwoTone } from '@mui/icons-material';\nimport { CircularProgress, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React from 'react';\n\nexport default class TimeCounter extends React.Component {\n  render() {\n    const { timer } = this.props;\n    const ONE_PERCENT = 3.33;\n    return (\n      <Box\n        sx={ {\n          position: 'relative', display: 'inline-flex',\n        } }\n      >\n        <Box\n          sx={ {\n            top: 0,\n            left: 0,\n            bottom: 25,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          } }\n        >\n          <TimerTwoTone sx={ { fontSize: 20 } } />\n        </Box>\n        <CircularProgress\n          variant=\"determinate\"\n          value={ timer * ONE_PERCENT }\n          sx={ { color: '#006600' } }\n          size={ 70 }\n          thickness={ 3 }\n        />\n        <Box\n          sx={ {\n            top: 22,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          } }\n        >\n          <Typography\n            sx={ { fontWeight: 600, fontSize: 26 } }\n            variant=\"h6\"\n            component=\"div\"\n            color=\"text.secondary\"\n          >\n            {timer}\n          </Typography>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nTimeCounter.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n","export const fetchPlayerToken = async () => {\n  const request = await fetch('https://opentdb.com/api_token.php?command=request')\n    .then((response) => response.json())\n    .then((token) => localStorage.setItem('token', token.token));\n  return request;\n};\n\nexport const fetchPlayerImg = async (hash) => {\n  const request = await fetch(`https://www.gravatar.com/avatar/${hash}`);\n  return request;\n};\n\nexport const fetchQuestions = async (token, settings) => {\n  const settingsKeys = Object.keys(settings);\n  let apiCall = 'https://opentdb.com/api.php?amount=5&encode=url3986';\n  settingsKeys.forEach((setting, index) => {\n    if (settings[setting] !== 'All') {\n      apiCall += `&${settingsKeys[index]}=${settings[setting]}`;\n    }\n  });\n  const request = await fetch(`${apiCall}&${token}`)\n    .then((response) => response.json())\n    .then((questions) => questions.results);\n  return request;\n};\n\nexport const fetchCategories = () => fetch('https://opentdb.com/api_category.php')\n  .then((response) => response.json())\n  .then((categories) => localStorage.setItem('categories', JSON.stringify(categories)));\n\nexport const updateLocalStorage = ({ PlayerAssertions, PlayerScore }, player) => {\n  const localStorageObj = {\n    player: {\n      name: player.name,\n      assertions: PlayerAssertions,\n      score: PlayerScore,\n      gravatarEmail: player.email,\n      picture: player.avatar,\n    },\n  };\n  localStorage.setItem('state', JSON.stringify(localStorageObj));\n};\n\nexport const updateRanking = () => {\n  const playerInfo = JSON.parse(localStorage.getItem('state'));\n\n  const player = {\n    name: playerInfo.player.name,\n    score: playerInfo.player.score,\n    picture: playerInfo.player.picture,\n  };\n\n  const getRanking = JSON.parse(localStorage.getItem('ranking'));\n  if (getRanking) {\n    localStorage.setItem('ranking', JSON.stringify([...getRanking, player]));\n  } else localStorage.setItem('ranking', JSON.stringify([player]));\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Box } from '@mui/system';\nimport { Button, Paper, Typography } from '@mui/material';\n\nexport class QuestionBody extends React.Component {\n  randomAnswers(questions) {\n    const { handler, classes, state: { questionNumber, clicked } } = this.props;\n    const allQuestions = [\n      questions[questionNumber].correct_answer,\n      ...questions[questionNumber].incorrect_answers,\n    ].sort();\n    return (\n      <Box\n        sx={ {\n          display: 'flex',\n          flexDirection: 'column',\n        } }\n      >\n        {allQuestions.map((question, index) => {\n          if (question === questions[questionNumber].correct_answer) {\n            return (\n              <Button\n                name=\"correct-answer\"\n                variant=\"outlined\"\n                sx={ { my: 1 } }\n                onClick={ handler }\n                data-testid=\"correct-answer\"\n                disabled={ clicked }\n                id=\"correct\"\n                className={ classes.disabledGreen }\n                key={ index }\n              >\n                {decodeURIComponent(question)}\n              </Button>\n            );\n          }\n          return (\n            <Button\n              variant=\"outlined\"\n              sx={ { my: 1 } }\n              type=\"button\"\n              disabled={ clicked }\n              id={ index }\n              className={ classes.disabledRed }\n              key={ index }\n              data-testid={ `wrong-answer-${index}` }\n              onClick={ handler }\n            >\n              {decodeURIComponent(question)}\n            </Button>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  render() {\n    const { nextButton, questions, state: { questionNumber, clicked } } = this.props;\n    return (\n      <Paper\n        variant=\"outlined\"\n        sx={ {\n          maxWidth: { xs: '80%' },\n          my: { xs: 1, md: 2 },\n          p: 2,\n          pb: 5,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center' } }\n      >\n        <Paper elevation=\"3\" sx={ { textAlign: 'center', p: 1 } }>\n          <Typography sx={ { fontSize: { xs: 18, md: 20 }, fontWeight: 'bold' } }>\n            {decodeURIComponent(questions[questionNumber].category)}\n          </Typography>\n        </Paper>\n        <Typography\n          variant=\"h6\"\n          sx={ { py: 3, fontWeight: 'regular', textAlign: 'center' } }\n          gutterBottom\n        >\n          {decodeURIComponent(questions[questionNumber].question)}\n        </Typography>\n        {this.randomAnswers(questions)}\n        {clicked && (\n          <Button\n            sx={ { mt: 2 } }\n            variant=\"contained\"\n            data-testid=\"btn-next\"\n            onClick={ () => nextButton(questionNumber) }\n          >\n            Next\n          </Button>\n        )}\n      </Paper>\n    );\n  }\n}\n\nQuestionBody.propTypes = {\n  classes: PropTypes.shape({\n    disabledGreen: PropTypes.string,\n    disabledRed: PropTypes.string,\n  }).isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  state: PropTypes.shape({\n    clicked: PropTypes.bool.isRequired,\n    questionNumber: PropTypes.number,\n  }).isRequired,\n  handler: PropTypes.func.isRequired,\n  nextButton: PropTypes.func.isRequired,\n};\n\nexport default (QuestionBody);\n","import { Container, Typography, Avatar, CssBaseline, Box } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/styles';\nimport TimeCounter from '../components/TimeCounter';\nimport { updateLocalStorage, updateRanking } from '../services/apiHelper';\nimport { QuestionBody } from '../components/QuestionBody';\n\nconst ONE_SECOND = 1000;\n\nconst styles = () => ({\n  disabledGreen: {\n    '&:disabled': {\n      borderColor: 'black !important',\n      border: '3px solid black !important',\n      background: 'linear-gradient(45deg, #1df401 30%, #1df401 90%)',\n      color: '#212121 !important',\n    },\n  },\n  disabledRed: {\n    '&:disabled': {\n      background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    },\n  },\n});\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: false,\n      timer: 30,\n      questionNumber: 0,\n      PlayerScore: 0,\n      PlayerAssertions: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.setTimer = this.setTimer.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n  }\n\n  componentDidMount() {\n    const { player } = this.props;\n    this.setTimer();\n    updateLocalStorage(this.state, player);\n  }\n\n  componentWillUnmount() {\n    updateRanking();\n  }\n\n  handleClick({ target }) {\n    const { timer, questionNumber } = this.state;\n    const { questions, player } = this.props;\n    const { difficulty } = questions[questionNumber];\n    const baseScore = 10;\n\n    const obj = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    this.setState({ clicked: true });\n\n    if (target.name === 'correct-answer') {\n      this.setState((prevstate) => ({\n        PlayerScore:\n          prevstate.PlayerScore + baseScore + timer * obj[difficulty],\n        PlayerAssertions: prevstate.PlayerAssertions + 1,\n      }), () => {\n        updateLocalStorage(this.state, player);\n      });\n    }\n  }\n\n  setTimer() {\n    this.setState({ timer: 30 });\n    const countdown = setInterval(() => {\n      this.setState(\n        (prevState) => ({\n          timer: prevState.timer - 1,\n        }),\n        () => {\n          const { timer, clicked } = this.state;\n          if (timer <= 0 || clicked) {\n            clearInterval(countdown);\n            this.setState({ clicked: true });\n          }\n        },\n      );\n    }, ONE_SECOND);\n  }\n\n  nextButton(questionNumber) {\n    const { history, questions } = this.props;\n    if (questionNumber < questions.length - 1) {\n      this.setState(\n        (prevState) => ({\n          questionNumber: prevState.questionNumber + 1,\n          clicked: false,\n        }),\n        () => {\n          this.setTimer();\n        },\n      );\n    } else {\n      history.push('/trivia-game/feedback');\n    }\n  }\n\n  render() {\n    const { player, questions, classes } = this.props;\n    const { timer, questionNumber, PlayerScore } = this.state;\n\n    return (\n      <Container component=\"main\" maxWidth=\"md\" sx={ { pb: 5 } }>\n        <CssBaseline />\n        <Box\n          sx={ {\n            marginTop: 2,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          } }\n        >\n          <Avatar\n            sx={ { height: 50, width: 60 } }\n            src={ player.avatar }\n            alt=\"Player Image Avatar\"\n          />\n          <Typography variant=\"h6\">\n            {player.name}\n          </Typography>\n          <Typography\n            variant=\"h6\"\n            sx={ { fontWeight: 'regular' } }\n          >\n            {`${PlayerScore} Points`}\n          </Typography>\n          <TimeCounter timer={ timer } />\n          <QuestionBody\n            state={ this.state }\n            questions={ questions }\n            classes={ classes }\n            handler={ this.handleClick }\n            nextButton={ this.nextButton }\n          />\n        </Box>\n        <hr\n          style={ {\n            color: '#000000',\n            backgroundColor: '#000000',\n            width: '80%',\n            borderColor: '#000000',\n          } }\n        />\n        <Typography\n          variant=\"h6\"\n          component=\"div\"\n          sx={ { pt: 2, pb: 4, fontWeight: 'regular', textAlign: 'center' } }\n          gutterBottom\n        >\n          {`${questionNumber + 1}/5`}\n        </Typography>\n      </Container>\n    );\n  }\n}\n\nGame.propTypes = {\n  classes: PropTypes.shape({\n    disabledGreen: PropTypes.string,\n    disabledRed: PropTypes.string,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  player: PropTypes.shape({\n    avatar: PropTypes.string,\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  questions: state.user.questions,\n  player: state.user.player,\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(Game));\n","import PropTypes from 'prop-types';\nimport { Backdrop, CircularProgress } from '@mui/material';\nimport React from 'react';\n\nexport default function BackdropComp({ open }) {\n  return (\n    <Backdrop\n      sx={ { color: '#fff' } }\n      open={ open }\n    >\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>);\n}\n\nBackdropComp.propTypes = {\n  open: PropTypes.bool.isRequired,\n};\n","export const SET_PLAYER_INFO = 'SET_PLAYER_INFO';\nexport const SET_QUESTIONS = 'SET_QUESTIONS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const setPlayerInfo = (payload) => ({ type: SET_PLAYER_INFO, payload });\nexport const setPlayerQuestions = (payload) => ({ type: SET_QUESTIONS, payload });\nexport const setPlayerSettings = (payload) => ({ type: SET_SETTINGS, payload });\n","import { createTheme } from '@mui/material';\n\nconst theme = createTheme({\n  palette: {\n    background: {\n      default: '#fafafa',\n    },\n    primary: {\n      main: '#212121',\n    },\n    secondary: {\n      main: '#9e9e9e',\n    },\n  },\n});\n\nexport default theme;\n","import PropTypes from 'prop-types';\nimport { Button, Dialog, DialogActions,\n  DialogContent, DialogContentText, DialogTitle } from '@mui/material';\nimport React from 'react';\n\nexport default function ErrorDialog({ openError, setOpenError }) {\n  return (\n    <Dialog\n      open={ openError }\n      onClose={ () => setOpenError(false) }\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Error: Unable to find questions with the current settings.\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Please change the Category, Difficulty and/or Type.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={ () => setOpenError(false) }\n          autofocus\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nErrorDialog.propTypes = {\n  openError: PropTypes.bool.isRequired,\n  setOpenError: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { TextField, MenuItem } from '@mui/material';\nimport React from 'react';\n\nexport default function SettingsSelect({ name, values, handler }) {\n  return (\n    <TextField\n      onChange={ handler }\n      select\n      label={ `${name[0].toUpperCase()}${name.substr(1)}` }\n      name={ name }\n    >\n      <MenuItem value=\"All\">\n        All\n      </MenuItem>\n      {name === 'category' ? (\n        values.trivia_categories.map((category) => (\n          <MenuItem key={ category.id } value={ category.name }>\n            {category.name}\n          </MenuItem>\n        ))\n      )\n        : (\n          values.map((value) => (\n            value === 'True/False'\n              ? (\n                <MenuItem key=\"boolean\" value=\"boolean\">\n                  {value}\n                </MenuItem>\n              )\n              : (\n                <MenuItem key={ value } value={ value.toLowerCase() }>\n                  {value}\n                </MenuItem>\n              )\n          ))\n        )}\n    </TextField>\n  );\n}\n\nSettingsSelect.propTypes = {\n  handler: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  values: PropTypes.shape({\n    map: PropTypes.func,\n    trivia_categories: PropTypes.shape({\n      map: PropTypes.func,\n    }).isRequired,\n  }).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Button, DialogActions,\n  DialogContent, DialogTitle, Typography, Grid, Stack, Dialog } from '@mui/material';\nimport { SettingsOutlined } from '@mui/icons-material';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchQuestions } from '../services/apiHelper';\nimport BackdropComp from '../components/Backdrop';\nimport { setPlayerSettings } from '../actions';\nimport theme from '../theme';\nimport ErrorDialog from '../components/ErrorDialog';\nimport SettingsSelect from '../components/SettingsSelect';\n\nfunction Settings({ handler, sendSettings, openSettings }) {\n  const [openBackdrop, setOpenBackdrop] = useState(false);\n  const [openError, setOpenError] = useState(false);\n  const [settings, setSettings] = useState({\n    category: 'All',\n    difficulty: 'All',\n    type: 'All',\n  });\n  const categories = JSON.parse(localStorage.getItem('categories'));\n\n  function handleClick() {\n    sendSettings(settings);\n    setOpenBackdrop(true);\n    const token = localStorage.getItem('token');\n    fetchQuestions(token, settings)\n      .then((questions) => {\n        if (!questions.length) {\n          setOpenError(true);\n          setOpenBackdrop(false);\n        } else {\n          handler(false);\n          setOpenBackdrop(false);\n        }\n      });\n  }\n\n  function handleChange({ target: { name, value } }) {\n    if (name === 'category') {\n      const cat = categories.trivia_categories\n        .find((category) => category.name === value);\n      setSettings({ ...settings,\n        [name]: cat ? cat.id : 'All',\n      });\n    } else {\n      setSettings({ ...settings,\n        [name]: value,\n      });\n    }\n  }\n\n  return (\n    <Dialog open={ openSettings }>\n      <DialogTitle dividers id=\"alert-dialog-title\">\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Typography variant=\"h2\" sx={ { fontSize: 42 } }>\n            Settings\n          </Typography>\n          <SettingsOutlined sx={ { fontSize: 50 } } />\n        </Grid>\n      </DialogTitle>\n      <DialogContent>\n        <Stack spacing={ 3 } sx={ { my: 1 } }>\n          <SettingsSelect\n            name=\"category\"\n            values={ categories }\n            handler={ handleChange }\n          />\n          <SettingsSelect\n            name=\"difficulty\"\n            values={ ['Easy', 'Medium', 'Hard'] }\n            handler={ handleChange }\n          />\n          <SettingsSelect\n            name=\"type\"\n            values={ ['Multiple', 'True/False'] }\n            handler={ handleChange }\n          />\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          type=\"button\"\n          onClick={ handleClick }\n          autofocus\n          size=\"medium\"\n          color=\"primary\"\n          sx={ {\n            '&:hover': { backgroundColor: theme.palette.secondary.main },\n          } }\n        >\n          Save\n        </Button>\n      </DialogActions>\n      <ErrorDialog openError={ openError } setOpenError={ setOpenError } />\n      <BackdropComp open={ openBackdrop } />\n    </Dialog>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendSettings: (payload) => dispatch(setPlayerSettings(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(Settings);\n\nSettings.propTypes = {\n  handler: PropTypes.func.isRequired,\n  sendSettings: PropTypes.func.isRequired,\n  openSettings: PropTypes.bool.isRequired,\n};\n","/* eslint-disable react/jsx-max-depth */\nimport PropTypes from 'prop-types';\nimport { Avatar, Button, Container, Grid,\n  Paper, Typography, CssBaseline, Box } from '@mui/material';\nimport React, { Component } from 'react';\n\nexport default class Feedback extends Component {\n  render() {\n    const userData = JSON.parse(localStorage.getItem('state'));\n    const THREE_QUESTIONS = 3;\n    const { player } = userData;\n    const { history } = this.props;\n    return (\n      <Container component=\"main\" maxWidth=\"md\" sx={ { pb: 5 } }>\n        <CssBaseline />\n        <Box\n          sx={ {\n            marginTop: 2,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          } }\n        >\n          <Paper sx={ { maxWidth: 400, my: 1, mx: 'auto', p: 2 } }>\n            <Grid container spacing={ 2 }>\n              <Grid item>\n                <Avatar\n                  data-testid=\"header-profile-picture\"\n                  src={ player.picture }\n                  alt=\"avatar\"\n                />\n              </Grid>\n              <Grid item xs>\n                <Typography\n                  sx={ { fontWeight: 'bold' } }\n                  variant=\"h6\"\n                  color=\"text.secondary\"\n                >\n                  {player.name}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Paper>\n          <Paper\n            variant=\"outlined\"\n            sx={ {\n              p: 3,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center' } }\n          >\n            <Paper elevation=\"3\" sx={ { textAlign: 'center', p: 1, px: 2 } }>\n              <Typography\n                variant=\"h5\"\n                color=\"text.primary\"\n              >\n                {`Score: ${player.score} points`}\n              </Typography>\n            </Paper>\n            <Typography\n              sx={ { pt: 2,\n                pb: 1,\n                fontSize: {\n                  xs: 16,\n                  sm: 'h6.fontSize',\n                },\n                fontWeight: 'regular' } }\n              color=\"text.primary\"\n            >\n              {`You scored ${player.assertions} out of 5 questions`}\n            </Typography>\n            {player.assertions >= THREE_QUESTIONS\n                && (\n                  <Typography\n                    sx={ { mb: 2,\n                      fontStyle: 'oblique',\n                      fontWeight: 'regular',\n                      textDecoration: 'underline',\n                      fontSize: {\n                        xs: 18,\n                        sm: 'h6.fontSize',\n                      } } }\n                  >\n                    Good Job!\n                  </Typography>\n                )}\n            <Button\n              variant=\"outlined\"\n              data-testid=\"btn-play-again\"\n              color=\"primary\"\n              onClick={ () => history.push('/trivia-game') }\n              sx={ { mb: 1 } }\n            >\n              Play Again\n            </Button>\n            <Button\n              variant=\"contained\"\n              data-testid=\"btn-ranking\"\n              color=\"primary\"\n              onClick={ () => history.push('/trivia-game/ranking') }\n            >\n              Ranking\n            </Button>\n          </Paper>\n        </Box>\n      </Container>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","import { Avatar,\n  Button,\n  Container,\n  CssBaseline,\n  Grid,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Paper,\n  Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { EmojiEventsTwoTone } from '@mui/icons-material';\nimport { Box } from '@mui/system';\n\nexport default class Ranking extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    const TOP_10 = 10;\n    const getRanking = JSON.parse(localStorage.getItem('ranking'));\n    const { history } = this.props;\n    return (\n      <Container component=\"main\">\n        <CssBaseline />\n        <Box\n          sx={ {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            mb: 5,\n          } }\n        >\n          <Grid\n            container\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            sx={ { py: 2 } }\n          >\n            <Typography variant=\"h2\" sx={ { fontSize: 40 } }>\n              Leaderboard\n            </Typography>\n            <EmojiEventsTwoTone sx={ { fontSize: 60 } } />\n          </Grid>\n          <Paper\n            variant=\"outlined\"\n            sx={ {\n              width: 250,\n              px: 2,\n              pb: 2,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center' } }\n          >\n            <List sx={ { mb: 2 } }>\n              {getRanking\n            && getRanking.sort((lower, greater) => greater.score - lower.score)\n              .map((user, index) => (\n                index < TOP_10 && (\n                  <ListItem key={ index } divider>\n                    <Typography variant=\"h6\" sx={ { fontSize: 18, mr: 1 } }>\n                      {index + 1}\n                    </Typography>\n                    <ListItemAvatar sx={ { ml: 1 } }>\n                      <Avatar\n                        sx={ { width: 45, height: 45 } }\n                        src={ user.picture }\n                      />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={ user.name }\n                      secondary={\n                        <Typography\n                          sx={ { display: 'inline', fontWeight: 'bold' } }\n                          component=\"span\"\n                          variant=\"body2\"\n                          color=\"text.primary\"\n                        >\n                          {user.score}\n                          {' '}\n                          Points\n                        </Typography>\n                      }\n                    />\n                  </ListItem>\n                )\n              ))}\n            </List>\n            <Button\n              variant=\"contained\"\n              type=\"button\"\n              data-testid=\"btn-go-home\"\n              onClick={ () => history.push('/trivia-game') }\n            >\n              Play Again\n            </Button>\n          </Paper>\n        </Box>\n      </Container>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","export default __webpack_public_path__ + \"static/media/trivia.7e9181d3.png\";","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button } from '@mui/material';\n\nexport default function PageButton({ name, user, handler }) {\n  return (\n    (\n      <Button\n        type={ name === 'Play' ? 'submit' : 'button' }\n        fullWidth\n        disabled={ name === 'Play' && !user.name }\n        onClick={ handler }\n        variant=\"contained\"\n        sx={ { my: 2 } }\n        color={ name === 'Play' ? 'primary' : 'secondary' }\n      >\n        {name}\n      </Button>)\n  );\n}\n\nPageButton.propTypes = {\n  handler: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nPageButton.defaultProps = {\n  handler: undefined,\n};\n","import { Link, TextField } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default function PageInput({ name, handler, value }) {\n  return (\n    <TextField\n      type={ name === 'email' ? 'email' : 'text' }\n      margin=\"normal\"\n      required={ name === 'name' }\n      fullWidth\n      id={ `${name[0].toUpperCase()}${name.substr(1)}` }\n      label={ name === 'email' ? 'Gravatar email:' : 'Name:' }\n      name={ name }\n      autoComplete={ name }\n      onChange={ handler }\n      value={ value }\n      helperText={ name === 'email' && (\n        <Link href=\"https://en.gravatar.com/\" target=\"_blank\" underline=\"always\">\n          Gravatar\n        </Link>\n      ) }\n    />\n  );\n}\n\nPageInput.propTypes = {\n  handler: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import { Link, Typography } from '@mui/material';\nimport React from 'react';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <hr />\n      <Typography\n        sx={ { mt: 2, pb: 2 } }\n        variant=\"body2\"\n        color=\"text.secondary\"\n        align=\"center\"\n      >\n        {'© '}\n        <Link color=\"text.primary\" target=\"_blank\" href=\"https://github.com/matheuspor\">\n          matheuspor\n        </Link>\n        {' 2021'}\n      </Typography>\n    </footer>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React\n  from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { Container, CssBaseline, Box } from '@mui/material';\nimport { withStyles } from '@mui/styles';\nimport { setPlayerInfo, setPlayerQuestions } from '../actions';\nimport '../App.css';\nimport logo from '../trivia.png';\nimport { fetchCategories, fetchPlayerImg, fetchPlayerToken,\n  fetchQuestions } from '../services/apiHelper';\nimport PageButton from '../components/PageButton';\nimport PageInput from '../components/PageInput';\nimport theme from '../theme';\nimport Footer from '../components/Footer';\nimport BackdropComp from '../components/Backdrop';\nimport Settings from './Settings';\n\nconst styles = () => ({\n  logo: {\n    height: '6em',\n    [theme.breakpoints.up('sm')]: {\n      height: '9em',\n    },\n    mb: '1em',\n    animation: 'shake infinite 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both',\n  },\n});\n\nexport class LoginPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const { player: { name, email } } = this.props;\n    this.state = {\n      user: {\n        name,\n        email,\n      },\n      openBackdrop: true,\n      openSettings: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    fetchPlayerToken()\n      .then(() => {\n        fetchCategories();\n        this.setState({ openBackdrop: false });\n      });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState((prevValue) => ({\n      user: {\n        ...prevValue.user,\n        [name]: value,\n      },\n    }));\n  }\n\n  handleSubmit(event) {\n    const { sendQuestions, sendPlayer, settings, history } = this.props;\n    const { user } = this.state;\n    event.preventDefault();\n    this.setState({ openBackdrop: true });\n    const emailHash = md5(user.email).toString();\n\n    fetchPlayerImg(emailHash)\n      .then(({ url }) => {\n        this.setState((prevState) => ({\n          user: {\n            ...prevState.user,\n            avatar: url,\n          },\n        }), () => {\n          const currentState = this.state;\n          sendPlayer(currentState.user);\n        });\n      });\n\n    fetchQuestions(localStorage.getItem('token'), settings)\n      .then((questions) => {\n        sendQuestions(questions);\n        history.push('/trivia-game/game');\n      });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { user, openBackdrop, openSettings } = this.state;\n    return (\n      <Container component=\"main\" maxWidth=\"xs\">\n        <BackdropComp open={ openBackdrop } />\n        <Settings\n          openSettings={ openSettings }\n          handler={ (value) => this.setState({ openSettings: value }) }\n        />\n        {openBackdrop || (\n          <>\n            <CssBaseline />\n            <Box\n              sx={ {\n                mt: 6,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n              } }\n            >\n              <img src={ logo } className={ classes.logo } alt=\"logo\" />\n              <Box\n                component=\"form\"\n                onSubmit={ this.handleSubmit }\n                sx={ { mt: 2 } }\n              >\n                <PageInput\n                  name=\"name\"\n                  value={ user.name }\n                  handler={ this.handleChange }\n                />\n                <PageInput\n                  name=\"email\"\n                  value={ user.email }\n                  handler={ this.handleChange }\n                />\n                <PageButton\n                  name=\"Play\"\n                  user={ user }\n                />\n                <PageButton\n                  name=\"Settings\"\n                  user={ user }\n                  handler={ () => this.setState({ openSettings: true }) }\n                />\n              </Box>\n            </Box>\n            <Footer />\n          </>\n        )}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user: { player, settings } }) => ({\n  player,\n  settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendQuestions: (payload) => dispatch(setPlayerQuestions(payload)),\n  sendPlayer: (payload) => dispatch(setPlayerInfo(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  withStyles(styles)(LoginPage),\n);\n\nLoginPage.propTypes = {\n  classes: PropTypes.shape({\n    logo: PropTypes.string,\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  player: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  sendPlayer: PropTypes.func.isRequired,\n  sendQuestions: PropTypes.func.isRequired,\n  settings: PropTypes.shape({\n    category: PropTypes.number,\n    difficulty: PropTypes.string,\n    type: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport game from './pages/Game';\nimport settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport Login from './pages/Login';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/trivia-game\" component={ Login } />\n      <Route path=\"/trivia-game/game\" component={ game } />\n      <Route path=\"/trivia-game/settings\" component={ settings } />\n      <Route path=\"/trivia-game/feedback\" component={ Feedback } />\n      <Route path=\"/trivia-game/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","import { SET_PLAYER_INFO, SET_QUESTIONS, SET_SETTINGS } from '../actions';\n\nconst INITIAL_STATE = {\n  player: {\n    name: '',\n    email: '',\n  },\n  questions: '',\n  settings: {\n    category: 'All',\n    difficulty: 'All',\n    type: 'All',\n  },\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_PLAYER_INFO:\n    return { ...state, player: action.payload };\n  case SET_QUESTIONS:\n    return { ...state, questions: action.payload };\n  case SET_SETTINGS:\n    return { ...state, settings: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\n\nconst rootReducer = combineReducers({ user });\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from '@emotion/react';\nimport App from './App';\n\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <ThemeProvider theme={ theme }>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}